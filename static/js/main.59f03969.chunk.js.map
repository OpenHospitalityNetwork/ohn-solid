{"version":3,"sources":["app/hooks.ts","features/user/userAPI.ts","features/offer/offerAPI.ts","features/offer/offerSlice.ts","features/user/userSlice.ts","features/login/loginAPI.ts","features/login/loginSlice.ts","features/login/Login.tsx","features/offer/Map.tsx","features/offer/Offers.tsx","features/Control.tsx","features/user/User.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","getUser","webId","a","getSolidDataset","fetch","dataset","user","getThing","name","getStringNoLocale","vcard","fn","foaf","avatarUrl","getUrl","hasPhoto","displayProtectedImage","avatar","about","note","getStringWithLocale","id","url","response","blob","objectUrl","URL","createObjectURL","fetchOffers","offers","i","j","push","position","Math","random","userId","getOffersOfUser","loadOffers","createAsyncThunk","api","offerSlice","createSlice","initialState","byId","allIds","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","forEach","offer","selectOffers","createSelector","map","dispatch","userSlice","includes","selectUser","_","users","login","oidcIssuer","solidLogin","redirectUrl","globalThis","location","href","clientName","init","handleIncomingRedirect","restorePreviousSession","logout","solidLogout","isLoggedIn","status","data","loginSlice","pending","selectLogin","Login","useState","provider","setProvider","onSubmit","e","preventDefault","htmlFor","type","value","onChange","target","Map","points","MapContainer","center","zoom","style","width","height","TileLayer","attribution","Marker","Popup","JSON","stringify","Offers","useEffect","Control","top","right","zIndex","to","encodeURIComponent","onClick","User","params","useParams","decodeURIComponent","src","alt","App","className","path","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","counterSlice","increment","decrement","incrementByAmount","actions","store","configureStore","reducer","offerReducer","userReducer","counter","counterReducer","loginReducer","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.59f03969.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import { User } from './types'\nimport {\n  getSolidDataset,\n  getThing,\n  getStringNoLocale,\n  getUrl,\n  getStringWithLocale,\n} from '@inrupt/solid-client'\nimport { fetch } from '@inrupt/solid-client-authn-browser'\nimport { vcard, foaf } from 'rdf-namespaces'\n\nexport const getUser = async (webId: string): Promise<User> => {\n  const dataset = await getSolidDataset(webId, { fetch })\n\n  const user = getThing(dataset, webId)\n  if (user) {\n    const name =\n      (getStringNoLocale(user, vcard.fn) ||\n        getStringNoLocale(user, foaf.name)) ??\n      ''\n    const avatarUrl = getUrl(user, vcard.hasPhoto) ?? ''\n    const avatar = avatarUrl ? await displayProtectedImage(avatarUrl) : ''\n    const about =\n      (getStringNoLocale(user, vcard.note) ||\n        getStringWithLocale(user, vcard.note, 'en')) ??\n      ''\n    return {\n      id: webId,\n      name,\n      avatar,\n      about,\n    }\n  }\n  return {\n    id: webId,\n    name: '',\n    avatar: '',\n    about: '',\n  }\n}\n\n/**\n * https://alphahydrae.com/2021/02/how-to-display-an-image-protected-by-header-based-authentication/\n */\nconst displayProtectedImage = async (url: string): Promise<string> => {\n  // Fetch the image.\n  const response = await fetch(url)\n\n  // Create an object URL from the data.\n  const blob = await response.blob()\n  const objectUrl = URL.createObjectURL(blob)\n  return objectUrl\n}\n","import { Offer } from './types'\n\n// A mock function to mimic making an async request for data\nexport const fetchOffers = async (): Promise<Offer[]> => {\n  const offers: Offer[] = []\n  for (let i = 0; i < 40; i++) {\n    for (let j = 0; j < 40; j++) {\n      offers.push({\n        id: `${i}_${j}`,\n        position: [(Math.random() - 0.5) * 160, (Math.random() - 0.5) * 360],\n        userId: '',\n      })\n    }\n  }\n  return offers\n}\n\nexport const getOffersOfUser = async (webId: string): Promise<Offer[]> => {\n  return [\n    {\n      id: '',\n      position: [0, 0],\n      userId: webId,\n    },\n  ]\n}\n","import { createAsyncThunk, createSelector, createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\nimport * as api from './offerAPI'\nimport { Offer } from './types'\n\nexport interface OfferState {\n  byId: { [id: string]: Offer }\n  allIds: string[]\n}\n\nconst initialState: OfferState = {\n  byId: {},\n  allIds: [],\n}\n\nexport const loadOffers = createAsyncThunk('offer/fetchOffers', async () => {\n  const response = await api.fetchOffers()\n  // The value we return becomes the `fulfilled` action payload\n  return response\n})\n\nexport const getOffersOfUser = createAsyncThunk(\n  'offer/getOffersOfUser',\n  async (webId: string) => {\n    return await api.getOffersOfUser(webId)\n  },\n)\n\nexport const offerSlice = createSlice({\n  name: 'offer',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(loadOffers.fulfilled, (state, action) => {\n      action.payload.forEach(offer => {\n        state.byId[offer.id] = offer\n        state.allIds.push(offer.id)\n      })\n    })\n  },\n})\n\n// export const { increment, decrement, incrementByAmount } = offerSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nconst selectRawOffers = (state: RootState) => state.offer\nexport const selectOffers = createSelector(\n  selectRawOffers,\n  ({ byId, allIds }) => allIds.map(id => byId[id]),\n)\n\nexport default offerSlice.reducer\n","import { createAsyncThunk, createSelector, createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\nimport * as api from './userAPI'\nimport { User } from './types'\nimport { getOffersOfUser } from '../offer/offerSlice'\n\nexport interface UserState {\n  byId: { [id: string]: User }\n  allIds: string[]\n}\n\nconst initialState: UserState = {\n  byId: {},\n  allIds: [],\n}\n\nexport const getUser = createAsyncThunk(\n  'user/fetchUser',\n  async (webId: string, { dispatch }) => {\n    const response = await api.getUser(webId)\n    dispatch(getOffersOfUser(webId))\n    return response\n  },\n)\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getUser.fulfilled, (state, action) => {\n      const user = action.payload\n      state.byId[user.id] = user\n      if (!state.allIds.includes(user.id)) {\n        state.allIds.push(user.id)\n      }\n    })\n  },\n})\n\nexport default userSlice.reducer\n\nconst selectUserId = (_: RootState, webId: string) => webId\n\nconst selectUsers = (state: RootState) => state.user.byId\n\nexport const selectUser = createSelector(\n  selectUserId,\n  selectUsers,\n  (webId, users) =>\n    users[webId] ?? { id: webId, name: '', avatar: '', about: '' },\n)\n","import {\n  handleIncomingRedirect,\n  login as solidLogin,\n  logout as solidLogout,\n} from '@inrupt/solid-client-authn-browser'\n\nexport const login = async (oidcIssuer: string) => {\n  return await solidLogin({\n    oidcIssuer,\n    redirectUrl: globalThis.location.href,\n    clientName: 'Open Hospitality Network',\n  })\n}\n\nexport const init = async () =>\n  await handleIncomingRedirect({\n    url: globalThis.location.href,\n    restorePreviousSession: true,\n  })\n\nexport const logout = async () => await solidLogout()\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\nimport { getUser } from '../user/userSlice'\nimport * as api from './loginAPI'\n\nexport interface LoginState {\n  webId: string\n  isLoggedIn: boolean\n  status: 'success' | 'pending' | 'failed'\n}\n\nconst initialState: LoginState = {\n  webId: '',\n  isLoggedIn: false,\n  status: 'pending',\n}\n\nexport const login = createAsyncThunk('login/login', api.login)\n\nexport const init = createAsyncThunk('login/init', async (_, { dispatch }) => {\n  const data = await api.init()\n  if (data?.isLoggedIn && data?.webId) {\n    dispatch(getUser(data.webId))\n  }\n  return data\n})\n\nexport const logout = createAsyncThunk('login/logout', api.logout)\n\nexport const loginSlice = createSlice({\n  name: 'login',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(login.pending, state => {\n        state.status = 'pending'\n      })\n      .addCase(login.fulfilled, state => {\n        state.status = 'success'\n      })\n      .addCase(init.fulfilled, (state, action) => {\n        state.status = 'success'\n        state.webId = action.payload?.webId ?? ''\n        state.isLoggedIn = action.payload?.isLoggedIn ?? false\n      })\n      .addCase(logout.fulfilled, state => {\n        state.isLoggedIn = initialState.isLoggedIn\n        state.status = 'success'\n        state.webId = initialState.webId\n      })\n  },\n})\n\nexport const selectLogin = (state: RootState) => state.login\n\nexport default loginSlice.reducer\n","import React, { FormEvent, useState } from 'react'\nimport { useAppDispatch } from '../../app/hooks'\nimport { login } from './loginSlice'\n\nconst Login = () => {\n  const [provider, setProvider] = useState('https://solidcommunity.net')\n  const dispatch = useAppDispatch()\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    dispatch(login(provider))\n  }\n  return (\n    <div>\n      <h1>Sign in with your Solid Identity</h1>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"provider\">Select your Solid Pod Provider</label>\n        <input\n          id=\"provider\"\n          type=\"text\"\n          value={provider}\n          onChange={e => setProvider(e.target.value)}\n        />\n        <input type=\"submit\" value=\"Sign In\" />\n      </form>\n    </div>\n  )\n}\n\nexport default Login\n","import React, { FC } from 'react'\nimport { MapContainer, Marker, Popup, TileLayer } from 'react-leaflet'\nimport { LatLngTuple } from 'leaflet'\nimport MarkerClusterGroup from 'react-leaflet-markercluster'\nimport { Offer } from './types'\nimport 'leaflet.markercluster/dist/MarkerCluster.css'\nimport 'leaflet.markercluster/dist/MarkerCluster.Default.css'\n\nconst Map: FC<{ points: Offer[] }> = ({ points }) => {\n  const position: LatLngTuple = [54, 23]\n\n  return (\n    <MapContainer\n      center={position}\n      zoom={10}\n      style={{ width: '100vw', height: '100vh' }}\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile-cyclosm.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png\"\n      />\n      <MarkerClusterGroup>\n        {points.map(({ id, position }) => (\n          <Marker key={JSON.stringify(position)} position={position}>\n            <Popup>There will be a basic user {id} info here, or not.</Popup>\n          </Marker>\n        ))}\n      </MarkerClusterGroup>\n    </MapContainer>\n  )\n}\n\nexport default Map\n","import React, { useEffect } from 'react'\nimport { useAppDispatch, useAppSelector } from '../../app/hooks'\nimport Map from './Map'\nimport { loadOffers, selectOffers } from './offerSlice'\n\nconst Offers = () => {\n  const offers = useAppSelector(selectOffers)\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    dispatch(loadOffers())\n  }, [dispatch])\n\n  return <Map points={offers} />\n}\n\nexport default Offers\n","import React from 'react'\nimport { useAppDispatch, useAppSelector } from '../app/hooks'\nimport { logout, selectLogin } from './login/loginSlice'\nimport { Link } from 'react-router-dom'\n\nconst Control = () => {\n  const login = useAppSelector(selectLogin)\n  const dispatch = useAppDispatch()\n  return (\n    <nav style={{ position: 'fixed', top: '1rem', right: '1em', zIndex: 500 }}>\n      <Link to=\"/\">map</Link>\n      <br />\n      <Link to={`/user/${encodeURIComponent(login.webId)}`}>{login.webId}</Link>\n      <br />\n      <button onClick={() => dispatch(logout())}>Logout</button>\n    </nav>\n  )\n}\n\nexport default Control\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { useParams } from 'react-router'\nimport { RootState } from '../../app/store'\nimport { selectUser } from './userSlice'\n\nconst User = () => {\n  const params = useParams<{ webId: string }>()\n  const webId = decodeURIComponent(params.webId)\n  const user = useSelector((state: RootState) => selectUser(state, webId))\n  return (\n    <div>\n      <p>\n        <a href={user.id}>{user.name}</a>\n      </p>\n      <p>\n        <img src={user.avatar} alt={`Image of ${user.name}`} />\n      </p>\n      <p>{user.about}</p>\n    </div>\n  )\n}\n\nexport default User\n","import React, { useEffect } from 'react'\nimport './App.css'\nimport { useAppDispatch, useAppSelector } from './app/hooks'\nimport Login from './features/login/Login'\nimport { init, selectLogin } from './features/login/loginSlice'\nimport Offers from './features/offer/Offers'\nimport Control from './features/Control'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport User from './features/user/User'\n\nfunction App() {\n  const login = useAppSelector(selectLogin)\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    dispatch(init())\n  }, [dispatch])\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {login.status === 'pending' ? (\n          <i>Loading</i>\n        ) : login.isLoggedIn ? (\n          <Router>\n            <Control />\n            <Switch>\n              <Route path=\"/user/:webId\">\n                <User />\n              </Route>\n              <Route path=\"/\">\n                <Offers />\n              </Route>\n            </Switch>\n          </Router>\n        ) : (\n          <Login />\n        )}\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>(resolve =>\n    setTimeout(() => resolve({ data: amount }), 500),\n  )\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { RootState, AppThunk } from '../../app/store'\nimport { fetchCount } from './counterAPI'\n\nexport interface CounterState {\n  value: number\n  status: 'idle' | 'loading' | 'failed'\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n}\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount)\n    // The value we return becomes the `fulfilled` action payload\n    return response.data\n  },\n)\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decrement: state => {\n      state.value -= 1\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder\n      .addCase(incrementAsync.pending, state => {\n        state.status = 'loading'\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle'\n        state.value += action.payload\n      })\n  },\n})\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd =\n  (amount: number): AppThunk =>\n  (dispatch, getState) => {\n    const currentValue = selectCount(getState())\n    if (currentValue % 2 === 1) {\n      dispatch(incrementByAmount(amount))\n    }\n  }\n\nexport default counterSlice.reducer\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport offerReducer from '../features/offer/offerSlice'\nimport counterReducer from '../features/counter/counterSlice'\nimport loginReducer from '../features/login/loginSlice'\nimport userReducer from '../features/user/userSlice'\n\nexport const store = configureStore({\n  reducer: {\n    offer: offerReducer,\n    user: userReducer,\n    counter: counterReducer,\n    login: loginReducer,\n  },\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}