{"version":3,"sources":["app/hooks.ts","features/offer/offerAPI.ts","features/offer/offerSlice.ts","features/user/userAPI.ts","features/community/communityAPI.ts","features/community/communitySlice.ts","features/user/userSlice.ts","features/login/loginAPI.ts","features/login/loginSlice.ts","features/login/Login.tsx","features/offer/PopupOffer.tsx","features/offer/Map.tsx","features/offer/OfferMap.tsx","features/Control.tsx","features/community/Community.tsx","features/offer/ConfirmRemoveOffer.tsx","features/offer/Offer.tsx","features/user/User.tsx","features/offer/EditOffer.tsx","features/offer/Offers.tsx","features/community/Communities.tsx","components/Loading.tsx","features/onboarding/onboardingSlice.ts","features/onboarding/FirstTime.tsx","features/onboarding/Onboarding.tsx","App.tsx","features/notification/notificationSlice.ts","app/store.ts","serviceWorker.ts","features/notification/Notification.tsx","AppErrorBoundary.tsx","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","wgs84","a","getHospexUri","webId","exec","getOffersOfUser","hospexUri","getSolidDataset","fetch","dataset","things","getThingAll","offers","map","thing","url","getUrl","rdf","type","filter","id","asUrl","locationUri","location","getThing","lat","getDecimal","long","about","getStringEnglish","rdfs","comment","userId","position","en","offer","createOffer","document","Date","now","locationBuilder","buildThing","setUrl","setDecimal","offerBuilder","setStringWithLocale","userThing","createThing","newUserThing","addUrl","build","newOfferThing","newLocationThing","newDataset","setThing","saveSolidDatasetAt","updateOffer","offerThing","locationThing","offerThingBuilder","setStringEnglish","locationThingBuilder","Error","removeOffer","updatedDataset","removeThing","createAsyncThunk","api","offerSlice","createSlice","name","initialState","byId","allIds","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","forEach","includes","push","selectOffers","createSelector","getUser","user","avatar","communityIds","hospexDocuments","offerIds","getStringNoLocale","vcard","fn","foaf","avatarUrl","hasPhoto","getProtectedImage","note","getStringWithLocale","hospexDataset","userThing2","getUrlAll","offerIds1","allThings","offerIds2","uniq","response","blob","objectUrl","URL","createObjectURL","createHospexDocument","uri","createSolidDataset","joinCommunity","community","groupId","method","headers","body","hasMember","hospexUser","newOrUpdatedHospexUser","getCommunitiesOfUser","communities","getCommunity","image","memberIds","communityThing","sioc","has_usergroup","memberDataset","memberThing","console","log","getState","dispatch","login","communityId","userIds","communitySlice","selectCommunityDict","selectCommunities","ids","dict","selectLoggedUser","users","selectCommunitiesOfLoggedUser","communityDict","length","documentId","userSlice","selectUserId","_","selectUser","selectUserOffers","Object","values","selectUserCommunities","oidcIssuer","solidLogin","redirectUrl","globalThis","href","clientName","init","handleIncomingRedirect","restorePreviousSession","logout","solidLogout","isLoggedIn","status","joinStatus","data","loginSlice","pending","rejected","selectLogin","Login","useState","provider","setProvider","className","src","title","alt","onSubmit","e","preventDefault","htmlFor","value","onChange","target","PopupOffer","to","encodeURIComponent","Map","MapContainer","center","zoom","TileLayer","attribution","Marker","Popup","Offers","Control","items","icon","FaMap","FaUser","FaHome","FaUsers","onClick","FaSignOutAlt","item","classNames","colors","hoverbg100","bg200","bg300","text900","Community","isMember","onJoin","Math","floor","random","color","style","backgroundImage","textShadow","ConfirmRemoveOffer","confirmString","onConfirm","onCancel","promptOpen","setPromptOpen","enteredString","setEnteredString","isOpen","onRequestClose","onAfterClose","contentLabel","closeTimeoutMS","overlayClassName","base","afterOpen","beforeClose","event","autoFocus","disabled","Offer","editable","props","requestingDelete","setRequestingDelete","onClickEdit","hash","SetLocation","useMap","useEffect","setView","Location","attributionControl","scrollWheelZoom","doubleClickZoom","touchZoom","User","params","useParams","decodeURIComponent","loggedUser","EditOffer","submit","editedOffer","setEditedOffer","placeholder","normalizeLng","lng","LocationDrag","onDrag","useMapEvent","getCenter","CurrentLocation","onLocationFound","latlng","flyTo","LocationEdit","setMap","locate","whenCreated","create","setCreate","edit","setEdit","offerToEdit","find","handleUpdate","handleCancel","Communities","userCommunities","Loading","message","onboardingSlice","onboarding","step","setOnboarding","incrementStep","decrementStep","setStep","actions","selectOnboarding","FirstTime","Onboarding","history","useHistory","steps","useMemo","text","replace","i","App","path","OfferMap","detail","notificationSlice","setNotification","clearNotification","addMatcher","isRejected","error","code","trim","selectNotification","notification","store","configureStore","reducer","offerReducer","communityReducer","userReducer","loginReducer","onboardingReducer","notificationReducer","Boolean","window","hostname","match","NotificationContainer","Notification","escFunction","key","stopPropagation","addEventListener","removeEventListener","tabIndex","AppErrorBoundary","hasError","this","setState","constructor","children","React","Component","connector","connect","Modal","setAppElement","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.424f03a4.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import {\n  asUrl,\n  buildThing,\n  createThing,\n  getDecimal,\n  getSolidDataset,\n  getStringEnglish,\n  getThing,\n  getThingAll,\n  getUrl,\n  removeThing,\n  saveSolidDatasetAt,\n  setThing,\n  ThingPersisted,\n} from '@inrupt/solid-client'\nimport { fetch } from '@inrupt/solid-client-authn-browser'\nimport { LatLngTuple } from 'leaflet'\nimport { rdf, rdfs } from 'rdf-namespaces'\nimport { LanguageString } from '../../types'\nimport { Offer } from './types'\n\nconst wgs84 = (a: string) => 'http://www.w3.org/2003/01/geo/wgs84_pos#' + a\n\nexport const getHospexUri = (webId: string) => {\n  const baseUrl = /^(https:\\/\\/.*)\\/profile\\/card#me$/g.exec(webId)?.[1]\n  return baseUrl + '/public/hospex.ttl'\n}\n\nexport const getOffersOfUser = async (webId: string): Promise<Offer[]> => {\n  // @TODO replace with type indexes\n  const hospexUri = getHospexUri(webId)\n  const dataset = await getSolidDataset(hospexUri, { fetch })\n\n  const things = getThingAll(dataset)\n  const offers = things\n    .map(thing => ({ thing, url: getUrl(thing, rdf.type) }))\n    .filter(\n      ({ thing, url }) =>\n        thing && url === 'https://hospex.example.com/terms/0.1#Accommodation',\n    )\n    .map(({ thing }) => thing)\n    .map(thing => {\n      const id = asUrl(thing)\n\n      const locationUri = getUrl(thing, wgs84('location'))\n\n      if (!locationUri) return null\n\n      const location = getThing(dataset, locationUri)\n\n      const lat = location && getDecimal(location, wgs84('lat'))\n      const long = location && getDecimal(location, wgs84('long'))\n\n      if (lat === null || long === null) return null\n\n      const about = getStringEnglish(thing, rdfs.comment) ?? ''\n\n      return {\n        id,\n        userId: webId,\n        position: [lat, long] as LatLngTuple,\n        about: { en: about } as LanguageString,\n      }\n    })\n    .filter((offer): offer is Offer => offer !== null)\n\n  return offers\n}\n\nexport const createOffer = async (offer: Offer, document: string) => {\n  const dataset = await getSolidDataset(document, { fetch })\n\n  const locationUri = `${document}#location${Date.now()}`\n\n  const locationBuilder = buildThing({ url: locationUri })\n    .setUrl(rdf.type, wgs84('Point'))\n    .setDecimal(wgs84('lat'), offer.position[0])\n    .setDecimal(wgs84('long'), offer.position[1])\n\n  const offerBuilder = buildThing({ url: offer.id })\n    .setUrl(rdf.type, 'https://hospex.example.com/terms/0.1#Accommodation')\n    .setUrl('https://hospex.example.com/terms/0.1#offeredBy', offer.userId)\n    .setUrl(wgs84('location'), locationUri)\n    .setStringWithLocale(rdfs.comment, offer.about.en, 'en')\n\n  const userThing =\n    getThing(dataset, offer.userId) ?? createThing({ url: offer.userId })\n\n  const newUserThing = buildThing(userThing)\n    .addUrl('https://hospex.example.com/terms/0.1#offers', offer.id)\n    .build()\n\n  const newOfferThing = offerBuilder.build()\n  const newLocationThing = locationBuilder.build()\n\n  let newDataset = setThing(dataset, newOfferThing)\n  newDataset = setThing(newDataset, newLocationThing)\n  newDataset = setThing(newDataset, newUserThing)\n  await saveSolidDatasetAt(document, newDataset, { fetch })\n\n  return offer\n}\n\nexport const updateOffer = async (offer: Offer, document: string) => {\n  const dataset = await getSolidDataset(document, { fetch })\n  const offerThing = getThing(dataset, offer.id) as ThingPersisted\n\n  if (offerThing) {\n    const locationUri = getUrl(offerThing, wgs84('location')) ?? ''\n\n    const locationThing = getThing(dataset, locationUri)\n\n    if (locationThing) {\n      const offerThingBuilder = buildThing(offerThing).setStringEnglish(\n        rdfs.comment,\n        offer.about.en,\n      )\n      const locationThingBuilder = buildThing(locationThing)\n        .setDecimal(wgs84('lat'), offer.position[0])\n        .setDecimal(wgs84('long'), offer.position[1])\n      let newDataset = setThing(dataset, offerThingBuilder.build())\n      newDataset = setThing(newDataset, locationThingBuilder.build())\n      await saveSolidDatasetAt(document, newDataset, { fetch })\n      return offer\n    }\n    throw new Error('location to update not found')\n  }\n  throw new Error('offer to update not found')\n}\n\nexport const removeOffer = async (offer: Offer) => {\n  const dataset = await getSolidDataset(offer.id, { fetch })\n  const offerThing = getThing(dataset, offer.id) as ThingPersisted\n\n  if (offerThing) {\n    const locationUri = getUrl(offerThing, wgs84('location')) ?? ''\n\n    let updatedDataset = removeThing(dataset, locationUri)\n    updatedDataset = removeThing(updatedDataset, offer.id)\n\n    await saveSolidDatasetAt(offer.id, updatedDataset, { fetch })\n    return offer\n  }\n  throw new Error('offer to remove not found')\n}\n","import { createAsyncThunk, createSelector, createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\nimport * as api from './offerAPI'\nimport { Offer } from './types'\n\nexport interface OfferState {\n  byId: { [id: string]: Offer }\n  allIds: string[]\n}\n\nconst initialState: OfferState = {\n  byId: {},\n  allIds: [],\n}\n\nexport const getOffersOfUser = createAsyncThunk(\n  'offer/getOffersOfUser',\n  async (webId: string) => {\n    return await api.getOffersOfUser(webId)\n  },\n)\n\nexport const createOffer = createAsyncThunk(\n  'offer/create',\n  async ({ offer, document }: { offer: Offer; document: string }) => {\n    return await api.createOffer(offer, document)\n  },\n)\n\nexport const updateOffer = createAsyncThunk(\n  'offer/update',\n  async ({ offer, document }: { offer: Offer; document: string }) => {\n    return await api.updateOffer(offer, document)\n  },\n)\n\nexport const removeOffer = createAsyncThunk(\n  'offer/remove',\n  async (offer: Offer) => {\n    return await api.removeOffer(offer)\n  },\n)\n\nexport const offerSlice = createSlice({\n  name: 'offer',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(getOffersOfUser.fulfilled, (state, action) => {\n        action.payload.forEach(offer => {\n          state.byId[offer.id] = offer\n          if (!state.allIds.includes(offer.id)) {\n            state.allIds.push(offer.id)\n          }\n        })\n      })\n      .addCase(createOffer.fulfilled, (state, action) => {\n        const offer = action.payload\n        state.byId[offer.id] = offer\n        state.allIds.push(offer.id)\n      })\n      .addCase(updateOffer.fulfilled, (state, action) => {\n        const offer = action.payload\n        state.byId[offer.id] = offer\n      })\n      .addCase(removeOffer.fulfilled, (state, action) => {\n        const offer = action.payload\n        delete state.byId[offer.id]\n        state.allIds = state.allIds.filter(id => id !== offer.id)\n      })\n  },\n})\n\n// Selectors\nconst selectRawOffers = (state: RootState) => state.offer\nexport const selectOffers = createSelector(\n  selectRawOffers,\n  ({ byId, allIds }) => allIds.map(id => byId[id]),\n)\n\nexport default offerSlice.reducer\n","import { User } from './types'\nimport {\n  getSolidDataset,\n  getThing,\n  getStringNoLocale,\n  getUrl,\n  getStringWithLocale,\n  getUrlAll,\n  getThingAll,\n  saveSolidDatasetAt,\n  createSolidDataset,\n} from '@inrupt/solid-client'\nimport { fetch } from '@inrupt/solid-client-authn-browser'\nimport { vcard, foaf } from 'rdf-namespaces'\nimport { getHospexUri } from '../offer/offerAPI'\nimport uniq from 'lodash/uniq'\n\nexport const getUser = async (webId: string): Promise<User | null> => {\n  const user: User = {\n    id: webId,\n    name: '',\n    avatar: '',\n    about: { en: '' },\n    communityIds: [],\n    hospexDocuments: [],\n    offerIds: [],\n  }\n\n  const dataset = await getSolidDataset(webId, { fetch })\n\n  const userThing = getThing(dataset, webId)\n  if (!userThing) return null\n  user.name =\n    (getStringNoLocale(userThing, vcard.fn) ||\n      getStringNoLocale(userThing, foaf.name)) ??\n    ''\n  const avatarUrl = getUrl(userThing, vcard.hasPhoto) ?? ''\n  user.avatar = avatarUrl ? await getProtectedImage(avatarUrl) : ''\n  user.about.en =\n    (getStringNoLocale(userThing, vcard.note) ||\n      getStringWithLocale(userThing, vcard.note, 'en')) ??\n    ''\n\n  // here we fetch user's hospex document(s)\n  try {\n    const hospexUri = getHospexUri(webId)\n    const hospexDataset = await getSolidDataset(hospexUri, { fetch })\n\n    user.hospexDocuments.push(hospexUri)\n\n    const userThing2 = getThing(hospexDataset, webId)\n    if (userThing2) {\n      user.communityIds = getUrlAll(\n        userThing2,\n        'https://hospex.example.com/terms/0.1#memberOf',\n      )\n\n      const offerIds1 = getUrlAll(\n        userThing2,\n        'https://hospex.example.com/terms/0.1#offers',\n      )\n\n      const allThings = getThingAll(hospexDataset)\n      const offerIds2 = allThings\n        .map(thing => ({\n          thing,\n          url: getUrl(thing, 'https://hospex.example.com/terms/0.1#offeredBy'),\n        }))\n        .filter(({ url }) => url === webId)\n        .map(({ thing }) => thing.url)\n\n      user.offerIds = uniq([...offerIds1, ...offerIds2])\n    }\n  } catch (e) {\n    e\n  }\n\n  return user\n}\n\n/**\n * https://alphahydrae.com/2021/02/how-to-display-an-image-protected-by-header-based-authentication/\n */\nexport const getProtectedImage = async (url: string): Promise<string> => {\n  // Fetch the image.\n  const response = await fetch(url)\n\n  // Create an object URL from the data.\n  const blob = await response.blob()\n  const objectUrl = URL.createObjectURL(blob)\n  return objectUrl\n}\n\nexport const createHospexDocument = async (uri: string) => {\n  try {\n    await getSolidDataset(uri, { fetch })\n  } catch (error) {\n    // save the solid dataset to the new place\n\n    return await saveSolidDatasetAt(uri, createSolidDataset(), {\n      fetch,\n    })\n  }\n  throw new Error('document already exists')\n}\n\n/*\n * This is how to query turtle document with SPARQL and rdflib\nexport const queryTurtle = <T extends Record<string, string>>(\n  turtle: string,\n  baseUrl: string,\n  sparql: string,\n): T[] => {\n  const store = rdflib.graph()\n  rdflib.parse(turtle, store, baseUrl, 'text/turtle')\n  const query = rdflib.SPARQLToQuery(sparql, false, store)\n\n  const bindings: Bindings[] = store.querySync(query)\n  return bindings.map(\n    a =>\n      Object.fromEntries(\n        Object.entries(a).map(([key, val]) => [key.substr(1), val.value]),\n      ) as T,\n  )\n}\n*/\n","import {\n  buildThing,\n  createThing,\n  getSolidDataset,\n  getStringEnglish,\n  getThing,\n  getUrl,\n  getUrlAll,\n  saveSolidDatasetAt,\n  setThing,\n} from '@inrupt/solid-client'\nimport { fetch } from '@inrupt/solid-client-authn-browser'\nimport { sioc, vcard } from 'rdf-namespaces'\nimport { getHospexUri } from '../offer/offerAPI'\nimport { getProtectedImage } from '../user/userAPI'\nimport { Community } from './types'\n\nexport const joinCommunity = async (community: Community, userId: string) => {\n  // append the user into the group inbox\n  // TODO this must be much more secure, so people don't just add themselves into groups.\n  await fetch(community.groupId, {\n    method: 'PATCH',\n    headers: { 'Content-Type': 'application/sparql-update' },\n    body: `\n        INSERT DATA {\n            <${community.groupId}> <${vcard.hasMember}> <${userId}> .\n        }\n    `,\n  })\n\n  // create :me 'https://hospex.example.com/terms/0.1#memberOf' communityId.\n  // in hospex document\n  const hospexUri = getHospexUri(userId)\n  const dataset = await getSolidDataset(hospexUri, { fetch })\n\n  const hospexUser = getThing(dataset, userId)\n\n  const newOrUpdatedHospexUser = buildThing(\n    hospexUser ?? createThing({ url: userId }),\n  )\n    .addUrl('https://hospex.example.com/terms/0.1#memberOf', community.id)\n    .build()\n\n  await saveSolidDatasetAt(\n    hospexUri,\n    setThing(dataset, newOrUpdatedHospexUser),\n    { fetch },\n  )\n}\n\nexport const getCommunitiesOfUser = async (\n  webId: string,\n): Promise<string[]> => {\n  // @TODO replace with type indexes\n  const hospexUri = getHospexUri(webId)\n  const dataset = await getSolidDataset(hospexUri, { fetch })\n\n  const user = getThing(dataset, webId)\n  if (!user) return []\n\n  const communities = getUrlAll(\n    user,\n    'https://hospex.example.com/terms/0.1#memberOf',\n  )\n\n  return communities\n}\n\nexport const getCommunity = async (id: string): Promise<Community> => {\n  const community: Community = {\n    id,\n    name: {},\n    about: {},\n    groupId: '',\n    image: await getProtectedImage('https://picsum.photos/400'), // TODO implement fetching photo\n    memberIds: [] as string[],\n  }\n\n  const dataset = await getSolidDataset(id, { fetch })\n\n  const communityThing = getThing(dataset, id)\n  if (!communityThing) throw new Error(\"Community couldn't be fetched\")\n\n  community.name.en =\n    getStringEnglish(communityThing, sioc.name) ?? 'Unknown Name'\n  community.groupId = getUrl(communityThing, sioc.has_usergroup) ?? ''\n\n  community.about.en = getStringEnglish(communityThing, sioc.about) ?? ''\n\n  try {\n    const memberDataset = await getSolidDataset(community.groupId, { fetch })\n    const memberThing = getThing(memberDataset, community.groupId)\n    if (memberThing)\n      community.memberIds = getUrlAll(memberThing, vcard.hasMember)\n  } catch (error) {\n    console.log(error)\n  }\n  return community\n}\n","import { createAsyncThunk, createSelector, createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\nimport { getUser } from '../user/userSlice'\nimport * as api from './communityAPI'\nimport { Community } from './types'\n\nexport interface CommunityState {\n  byId: { [id: string]: Community }\n  allIds: string[]\n}\n\nconst initialState: CommunityState = {\n  byId: {},\n  allIds: [],\n}\n\nexport const joinCommunity = createAsyncThunk(\n  'community/join',\n  async (community: Community, { getState, dispatch }) => {\n    const state = getState() as RootState\n    const userId = state.login.webId\n    await api.joinCommunity(community, userId)\n    dispatch(getCommunity(community.id))\n    return { userId, communityId: community.id }\n  },\n)\n\nexport const getCommunity = createAsyncThunk(\n  'community/getCommunity',\n  async (communityId: string, { getState, dispatch }) => {\n    const community = await api.getCommunity(communityId)\n\n    const state = getState() as RootState\n    const userIds = state.user.allIds\n\n    if (community) {\n      community.memberIds.forEach(id => {\n        if (!userIds.includes(id)) {\n          dispatch(getUser(id))\n        }\n      })\n    }\n\n    return community\n  },\n)\n\nexport const getCommunitiesOfUser = createAsyncThunk(\n  'community/getCommunitiesOfUser',\n  async (webId: string, { getState, dispatch }) => {\n    // fetch community ids of user\n    const communities = await api.getCommunitiesOfUser(webId)\n\n    // fetch communities that haven't been fetched before\n    const state = getState() as RootState\n    communities.forEach(community => {\n      if (!state.community.allIds.includes(community)) {\n        dispatch(getCommunity(community))\n      }\n    })\n    return {\n      userId: webId,\n      communities,\n    }\n  },\n)\n\nexport const communitySlice = createSlice({\n  name: 'community',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getCommunity.fulfilled, (state, action) => {\n      const community = action.payload\n      if (community) {\n        state.byId[community.id] = community\n        if (!state.allIds.includes(community.id)) {\n          state.allIds.push(community.id)\n        }\n      }\n    })\n  },\n})\n\nconst selectCommunityIds = (state: RootState) => state.community.allIds\n\nconst selectCommunityDict = (state: RootState) => state.community.byId\n\nexport const selectCommunities = createSelector(\n  selectCommunityIds,\n  selectCommunityDict,\n  (ids, dict) => ids.map(id => dict[id]).filter(community => !!community),\n)\n\nexport const selectLoggedUser = createSelector(\n  (state: RootState) => state.login.webId,\n  (state: RootState) => state.user.byId,\n  (webId, users) => users[webId],\n)\n\nexport const selectCommunitiesOfLoggedUser = createSelector(\n  selectLoggedUser,\n  selectCommunityDict,\n  (user, communityDict) =>\n    user?.communityIds\n      .map(id => communityDict[id])\n      .filter(community => !!community) ?? [],\n)\n\nexport default communitySlice.reducer\n","import { createAsyncThunk, createSelector, createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\nimport {\n  getCommunitiesOfUser,\n  joinCommunity,\n} from '../community/communitySlice'\nimport { getOffersOfUser } from '../offer/offerSlice'\nimport { User } from './types'\nimport * as api from './userAPI'\n\nexport interface UserState {\n  byId: { [id: string]: User }\n  allIds: string[]\n}\n\nconst initialState: UserState = {\n  byId: {},\n  allIds: [],\n}\n\nexport const getUser = createAsyncThunk(\n  'user/fetchUser',\n  async (webId: string, { dispatch }) => {\n    const response = await api.getUser(webId)\n    if (response && response.hospexDocuments.length > 0) {\n      dispatch(getOffersOfUser(webId))\n      dispatch(getCommunitiesOfUser(webId))\n    }\n    return response\n  },\n)\n\nexport const createHospexDocument = createAsyncThunk(\n  'user/createHospexDocument',\n  async ({ userId, documentId }: { userId: string; documentId: string }) => {\n    await api.createHospexDocument(documentId)\n    return { userId, documentId }\n  },\n)\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(getUser.fulfilled, (state, action) => {\n        const user = action.payload\n        if (user) {\n          state.byId[user.id] = user\n          if (!state.allIds.includes(user.id)) {\n            state.allIds.push(user.id)\n          }\n        }\n      })\n      .addCase(getCommunitiesOfUser.fulfilled, (state, action) => {\n        const { userId, communities } = action.payload\n\n        state.byId[userId].communityIds = communities\n      })\n      .addCase(joinCommunity.fulfilled, (state, action) => {\n        const { userId, communityId } = action.payload\n        if (!state.byId[userId].communityIds.includes(communityId))\n          state.byId[userId].communityIds.push(communityId)\n      })\n      .addCase(createHospexDocument.fulfilled, (state, action) => {\n        const { userId, documentId } = action.payload\n        state.byId[userId].hospexDocuments.push(documentId)\n      })\n  },\n})\n\nexport default userSlice.reducer\n\nconst selectUserId = (_: RootState, webId: string) => webId\n\nexport const selectUsers = (state: RootState) => state.user.byId\n\nexport const selectUser = createSelector(\n  selectUserId,\n  selectUsers,\n  (webId, users) =>\n    users[webId] ?? {\n      id: webId,\n      name: '',\n      avatar: '',\n      about: '',\n      communityIds: [],\n    },\n)\n\nconst selectOffers = (state: RootState) => state.offer.byId\n\nexport const selectUserOffers = createSelector(\n  selectUserId,\n  selectOffers,\n  (userId, offers) =>\n    Object.values(offers).filter(offer => offer.userId === userId),\n)\n\nconst selectCommunities = (state: RootState) => state.community.byId\n\nexport const selectUserCommunities = createSelector(\n  selectUser,\n  selectCommunities,\n  (user, communities) =>\n    Object.values(communities).filter(\n      community =>\n        user?.communityIds?.includes(community.id) &&\n        community.memberIds.includes(user.id),\n    ),\n)\n","import {\n  handleIncomingRedirect,\n  login as solidLogin,\n  logout as solidLogout,\n} from '@inrupt/solid-client-authn-browser'\n\nexport const login = async (oidcIssuer: string) => {\n  return await solidLogin({\n    oidcIssuer,\n    redirectUrl: globalThis.location.href,\n    clientName: 'Open Hospitality Network',\n  })\n}\n\nexport const init = async () =>\n  await handleIncomingRedirect({\n    url: globalThis.location.href,\n    restorePreviousSession: true,\n  })\n\nexport const logout = async () => await solidLogout()\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\nimport { getOffersOfUser } from '../offer/offerSlice'\nimport { getUser } from '../user/userSlice'\nimport * as api from './loginAPI'\n\nexport interface LoginState {\n  webId: string\n  isLoggedIn: boolean\n  status: 'success' | 'pending' | 'failed'\n  joinStatus: 'new' | 'pending' | 'old'\n}\n\nconst initialState: LoginState = {\n  webId: '',\n  isLoggedIn: false,\n  status: 'pending',\n  joinStatus: 'pending',\n}\n\nexport const login = createAsyncThunk('login/login', api.login)\n\nexport const init = createAsyncThunk('login/init', async (_, { dispatch }) => {\n  const data = await api.init()\n  if (data?.isLoggedIn && data?.webId) {\n    dispatch(getUser(data.webId))\n  }\n  return data\n})\n\nexport const logout = createAsyncThunk('login/logout', api.logout)\n\nexport const loginSlice = createSlice({\n  name: 'login',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(login.pending, state => {\n        state.status = 'pending'\n      })\n      .addCase(login.fulfilled, state => {\n        state.status = 'success'\n      })\n      .addCase(init.fulfilled, (state, action) => {\n        state.status = 'success'\n        state.webId = action.payload?.webId ?? ''\n        state.isLoggedIn = action.payload?.isLoggedIn ?? false\n      })\n      .addCase(logout.fulfilled, state => {\n        state.isLoggedIn = initialState.isLoggedIn\n        state.status = 'success'\n        state.webId = initialState.webId\n      })\n      // here we set up flow for new users\n      .addCase(getOffersOfUser.rejected, state => {\n        state.joinStatus = 'new'\n      })\n      .addCase(getOffersOfUser.fulfilled, state => {\n        state.joinStatus = 'old'\n      })\n  },\n})\n\nexport const selectLogin = (state: RootState) => state.login\n\nexport default loginSlice.reducer\n","import React, { FormEvent, useState } from 'react'\nimport { useAppDispatch } from '../../app/hooks'\nimport { login } from './loginSlice'\n\nconst Login = () => {\n  const [provider, setProvider] = useState('https://solidcommunity.net')\n  const dispatch = useAppDispatch()\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    dispatch(login(provider))\n  }\n  return (\n    <div className=\"flex flex-col items-center justify-evenly min-h-screen m-5\">\n      <div className=\"space-y-10\">\n        <section className=\"flex flex-col items-center space-y-2\">\n          <header>\n            <h1>Open Hospitality</h1>\n            <p className=\"italic\">hospitality, decentralized</p>\n          </header>\n          <div className=\"w-80 flex items-center justify-evenly\">\n            <a href=\"https://openhospitality.network\">\n              <img\n                src=\"https://openhospitality.network/assets/img/logo.png\"\n                title=\"Open Hospitality Network\"\n                alt=\"Open Hospitality Network logo\"\n                className=\"h-32\"\n              />\n            </a>\n            <span className=\"text-3xl\">+</span>\n            <a href=\"https://solidproject.org\">\n              <img\n                src=\"https://avatars3.githubusercontent.com/u/14262490?v=3&s=200\"\n                title=\"Solid Project\"\n                alt=\"Solid Project logo\"\n                className=\"h-32 p-5\"\n              />\n            </a>\n          </div>\n        </section>\n        <form\n          className=\"w-96 flex flex-col items-center space-y-2\"\n          onSubmit={handleSubmit}\n        >\n          <header className=\"text-xl font-bold\">\n            Sign in with your Solid Identity\n          </header>\n          <label htmlFor=\"provider\">Select your Solid Pod Provider</label>\n          <input\n            className=\"rounded border px-2 py-1 w-full\"\n            id=\"provider\"\n            type=\"text\"\n            value={provider}\n            onChange={e => setProvider(e.target.value)}\n          />\n          <button className=\"bg-blue-900 text-blue-50 w-full\" type=\"submit\">\n            Sign In\n          </button>\n        </form>\n      </div>\n    </div>\n  )\n}\n\nexport default Login\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { FaUser } from 'react-icons/fa'\nimport { useAppSelector } from '../../app/hooks'\nimport { selectUser } from '../user/userSlice'\nimport { Offer } from './types'\n\nconst PopupOffer: React.FC<{ offer: Offer }> = ({ offer }) => {\n  const user = useAppSelector(state => selectUser(state, offer.userId))\n  return (\n    <div>\n      <Link\n        to={`/users/${encodeURIComponent(user.id)}`}\n        className=\"flex gap-2 items-center\"\n      >\n        {user.avatar ? (\n          <img src={user.avatar} className=\"h-8 rounded\" />\n        ) : (\n          <FaUser className=\"h-8\" />\n        )}\n        {user.name}\n      </Link>\n      <p className=\"whitespace-pre-line text-justify w-56\">{offer.about.en}</p>\n    </div>\n  )\n}\n\nexport default PopupOffer\n","import { LatLngTuple } from 'leaflet'\nimport 'leaflet.markercluster/dist/MarkerCluster.css'\nimport 'leaflet.markercluster/dist/MarkerCluster.Default.css'\nimport React, { FC } from 'react'\nimport { MapContainer, Marker, Popup, TileLayer } from 'react-leaflet'\nimport MarkerClusterGroup from 'react-leaflet-markercluster'\nimport PopupOffer from './PopupOffer'\nimport { Offer } from './types'\n\n/* uncomment CurrentLocation to go to user's current location\nconst CurrentLocation = () => {\n  const map = useMap()\n  useEffect(() => {\n    map.locate()\n  }, [map])\n  useMapEvents({\n    locationfound: e => map.setView(e.latlng, 4),\n  })\n\n  return null\n}\n*/\n\nconst Map: FC<{ offers: Offer[] }> = ({ offers }) => {\n  const position: LatLngTuple = [30, 0]\n\n  return (\n    <MapContainer center={position} zoom={2} className=\"w-screen h-screen\">\n      {/*<CurrentLocation />*/}\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile-cyclosm.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png\"\n      />\n      <MarkerClusterGroup>\n        {offers.map(offer => (\n          <Marker key={offer.id} position={offer.position}>\n            <Popup>\n              <PopupOffer offer={offer} />\n            </Popup>\n          </Marker>\n        ))}\n      </MarkerClusterGroup>\n    </MapContainer>\n  )\n}\n\nexport default Map\n","import React from 'react'\nimport { useAppSelector } from '../../app/hooks'\nimport Map from './Map'\nimport { selectOffers } from './offerSlice'\n\nconst Offers = () => {\n  const offers = useAppSelector(selectOffers)\n  return <Map offers={offers} />\n}\n\nexport default Offers\n","import React from 'react'\nimport { useAppDispatch, useAppSelector } from '../app/hooks'\nimport { logout, selectLogin } from './login/loginSlice'\nimport { Link } from 'react-router-dom'\nimport { FaMap, FaUser, FaHome, FaSignOutAlt, FaUsers } from 'react-icons/fa'\nimport { IconType } from 'react-icons'\n\ntype LinkConfig = {\n  type: 'link'\n  to: string\n  icon: IconType\n  title: string\n}\n\ntype ButtonConfig = {\n  type: 'button'\n  icon: IconType\n  title: string\n  onClick: React.MouseEventHandler<HTMLButtonElement>\n}\n\nconst Control = () => {\n  const login = useAppSelector(selectLogin)\n  const dispatch = useAppDispatch()\n\n  const items: Array<LinkConfig | ButtonConfig> = [\n    { type: 'link', to: '/', title: 'map', icon: FaMap },\n    {\n      type: 'link',\n      to: `/users/${encodeURIComponent(login.webId)}`,\n      title: 'my profile',\n      icon: FaUser,\n    },\n    { type: 'link', to: '/offers', title: 'my offers', icon: FaHome },\n    { type: 'link', to: '/communities', title: 'communities', icon: FaUsers },\n    {\n      type: 'button',\n      onClick: () => dispatch(logout()),\n      title: 'sign out',\n      icon: FaSignOutAlt,\n    },\n  ]\n  return (\n    <nav className=\"fixed top-4 right-4 z-500 flex items-center gap-0 bg-opacity-50 bg-white text-gray-400 rounded\">\n      {items.map(item => {\n        const icon = <item.icon title={item.title} className=\"text-4xl p-2\" />\n\n        const classNames =\n          'p-0 hover:text-white hover:bg-opacity-100 hover:bg-black rounded'\n\n        return item.type === 'link' ? (\n          <Link key={item.title} className={classNames} to={item.to}>\n            {icon}\n          </Link>\n        ) : (\n          <button\n            key={item.title}\n            className={classNames}\n            onClick={item.onClick}\n          >\n            {icon}\n          </button>\n        )\n      })}\n    </nav>\n  )\n}\n\nexport default Control\n","import React, { useState } from 'react'\nimport { Community as CommunityType } from './types'\n\nconst colors = [\n  // red\n  {\n    hoverbg100: 'hover:bg-red-100',\n    bg200: 'bg-red-200',\n    bg300: 'bg-red-300',\n    text900: 'text-red-900',\n  },\n  // yellow\n  {\n    hoverbg100: 'hover:bg-yellow-100',\n    bg200: 'bg-yellow-200',\n    bg300: 'bg-yellow-300',\n    text900: 'text-yellow-900',\n  },\n  // green\n  {\n    hoverbg100: 'hover:bg-green-100',\n    bg200: 'bg-green-200',\n    bg300: 'bg-green-300',\n    text900: 'text-green-900',\n  },\n  // blue\n  {\n    hoverbg100: 'hover:bg-blue-100',\n    bg200: 'bg-blue-200',\n    bg300: 'bg-blue-300',\n    text900: 'text-blue-900',\n  },\n  // indigo\n  {\n    hoverbg100: 'hover:bg-indigo-100',\n    bg200: 'bg-indigo-200',\n    bg300: 'bg-indigo-300',\n    text900: 'text-indigo-900',\n  },\n  // purple\n  {\n    hoverbg100: 'hover:bg-purple-100',\n    bg200: 'bg-purple-200',\n    bg300: 'bg-purple-300',\n    text900: 'text-purple-900',\n  },\n  // pink\n  {\n    hoverbg100: 'hover:bg-pink-100',\n    bg200: 'bg-pink-200',\n    bg300: 'bg-pink-300',\n    text900: 'text-pink-900',\n  },\n]\n\nconst Community: React.FC<{\n  community: CommunityType\n  isMember: boolean\n  onJoin: () => void\n}> = ({ community, isMember, onJoin }) => {\n  const [color] = useState(colors[Math.floor(Math.random() * colors.length)])\n\n  return (\n    <div className={`w-64 p-4 ${color.bg300} rounded flex flex-col gap-4`}>\n      <header\n        style={{\n          backgroundImage: `url(\"${community.image}\")`,\n          textShadow: '0 0 5px white',\n        }}\n        className=\"py-16 text-center -m-4 rounded-t bg-cover bg-center text-xl font-bold\"\n      >\n        {community.name.en}\n      </header>\n      <section className=\"mt-2 whitespace-pre-line text-justify\">\n        {community.about.en}\n      </section>\n      {isMember ? (\n        <div className=\"text-center\">Member</div>\n      ) : (\n        <button\n          className={`${color.bg200} ${color.hoverbg100} ${color.text900}`}\n          onClick={onJoin}\n        >\n          Join\n        </button>\n      )}\n    </div>\n  )\n}\n\nexport default Community\n","/**\n * Inspired by Penny's ConfirmOperation component\n * https://gitlab.com/vincenttunru/penny/-/blob/main/src/components/ConfirmOperation.tsx\n */\n\nimport React, { FC, FormEventHandler, useState } from 'react'\nimport Modal from 'react-modal'\n\ninterface Props {\n  confirmString: string\n  onConfirm: () => void\n  onCancel: () => void\n}\n\nconst ConfirmRemoveOffer: FC<Props> = ({\n  confirmString,\n  onConfirm,\n  onCancel,\n}) => {\n  const [promptOpen, setPromptOpen] = useState(true)\n  const [enteredString, setEnteredString] = useState('')\n\n  const handleSubmit: FormEventHandler = event => {\n    event.preventDefault()\n\n    if (enteredString === confirmString) {\n      onConfirm()\n    }\n  }\n\n  return (\n    <Modal\n      isOpen={promptOpen}\n      onRequestClose={() => setPromptOpen(false)}\n      onAfterClose={onCancel}\n      contentLabel=\"Are you sure?\"\n      closeTimeoutMS={150}\n      overlayClassName={{\n        base: 'bg-opacity-90 bg-gray-900 fixed top-0 left-0 bottom-0 right-0 z-5000',\n        afterOpen: '',\n        beforeClose: '',\n      }}\n    >\n      <h1>Are you sure you want to remove offer?</h1>\n      <form onSubmit={handleSubmit} className=\"flex flex-col gap-2\">\n        <label>\n          Please enter{' '}\n          <samp>\n            <kbd>{confirmString}</kbd>\n          </samp>{' '}\n          below\n        </label>\n        <input\n          className=\"border rounded\"\n          type=\"text\"\n          value={enteredString}\n          onChange={e => setEnteredString(e.target.value)}\n          autoFocus\n        />\n        <button\n          type=\"submit\"\n          disabled={confirmString !== enteredString}\n          className=\"disabled:opacity-50 bg-red-400 disabled:cursor-not-allowed cursor-pointer\"\n        >\n          Confirm\n        </button>\n        <button className=\"border\" onClick={onCancel}>\n          Cancel\n        </button>\n      </form>\n    </Modal>\n  )\n}\n\nexport default ConfirmRemoveOffer\n/*\n      className={{\n        base: '',\n        afterOpen: '',\n        beforeClose: '',\n      }}\n      */\n","import { LatLngTuple } from 'leaflet'\nimport React, { MouseEventHandler, useEffect, useState } from 'react'\nimport { MapContainer, Marker, TileLayer, useMap } from 'react-leaflet'\nimport { useAppDispatch } from '../../app/hooks'\nimport ConfirmRemoveOffer from './ConfirmRemoveOffer'\nimport { removeOffer } from './offerSlice'\nimport { Offer as OfferType } from './types'\n\ninterface OfferProps {\n  offer: OfferType\n  editable?: false\n}\n\ninterface EditableOfferProps {\n  offer: OfferType\n  onClickEdit: MouseEventHandler<HTMLButtonElement>\n  editable: true\n}\n\nconst Offer: React.FC<OfferProps | EditableOfferProps> = ({\n  offer,\n  editable = false,\n  ...props\n}) => {\n  const dispatch = useAppDispatch()\n  const [requestingDelete, setRequestingDelete] = useState(false)\n  const handleRemove = () => {\n    dispatch(removeOffer(offer))\n    setRequestingDelete(false)\n  }\n  return (\n    <div className=\"w-64 p-4 bg-blue-50 rounded flex flex-col gap-4\">\n      <Location location={offer.position} className=\"w-56 h-56\" />\n      <section className=\"whitespace-pre-line text-justify\">\n        {offer.about.en}\n      </section>\n      {editable && 'onClickEdit' in props && (\n        <>\n          <button className=\"bg-white\" onClick={props.onClickEdit}>\n            edit\n          </button>\n          <button\n            className=\"bg-red-400\"\n            onClick={() => setRequestingDelete(true)}\n          >\n            remove\n          </button>\n          {requestingDelete && (\n            <ConfirmRemoveOffer\n              confirmString={new globalThis.URL(offer.id).hash}\n              onConfirm={handleRemove}\n              onCancel={() => setRequestingDelete(false)}\n            />\n          )}\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default Offer\n\nconst SetLocation = ({ location }: { location: LatLngTuple }) => {\n  const map = useMap()\n  useEffect(() => {\n    map.setView(location, 12)\n  }, [location, map])\n\n  return null\n}\n\nconst Location: React.FC<{ location: LatLngTuple; className?: string }> = ({\n  location,\n  className = '',\n}) => {\n  return (\n    <MapContainer\n      attributionControl={false}\n      center={location}\n      zoom={12}\n      scrollWheelZoom=\"center\"\n      doubleClickZoom=\"center\"\n      touchZoom=\"center\"\n      className={className}\n    >\n      <SetLocation location={location} />\n      <TileLayer url=\"https://{s}.tile-cyclosm.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png\" />\n      <Marker position={location} />\n    </MapContainer>\n  )\n}\n","import React from 'react'\nimport { FaExternalLinkAlt } from 'react-icons/fa'\nimport { useParams } from 'react-router'\nimport { useAppDispatch, useAppSelector } from '../../app/hooks'\nimport { RootState } from '../../app/store'\nimport Community from '../community/Community'\nimport { joinCommunity, selectLoggedUser } from '../community/communitySlice'\nimport Offer from '../offer/Offer'\nimport {\n  selectUser,\n  selectUserCommunities,\n  selectUserOffers,\n} from './userSlice'\n\nconst User = () => {\n  const params = useParams<{ webId: string }>()\n  const webId = decodeURIComponent(params.webId)\n  const user = useAppSelector((state: RootState) => selectUser(state, webId))\n  const offers = useAppSelector((state: RootState) =>\n    selectUserOffers(state, webId),\n  )\n  const loggedUser = useAppSelector(selectLoggedUser)\n  const communities = useAppSelector((state: RootState) =>\n    selectUserCommunities(state, webId),\n  )\n\n  const dispatch = useAppDispatch()\n\n  return (\n    <div className=\"flex flex-col items-center gap-4 my-8\">\n      <header className=\"flex items-center gap-2\">\n        <h1 className=\"italic\">\n          Profile of <span className=\"not-italic\">{user.name}</span>\n        </h1>{' '}\n        <a href={user.id}>\n          <FaExternalLinkAlt className=\"text-xs text-gray-400 hover:text-gray-800\" />\n        </a>\n      </header>\n      {user.avatar && (\n        <img\n          className=\"w-56 max-h-56\"\n          src={user.avatar}\n          alt={`image of ${user.name}`}\n        />\n      )}\n      <p className=\"w-56 whitespace-pre-line text-justify\">\n        {user.about.en || (\n          <span className=\"text-gray-500 italic\">\n            This user has no description\n          </span>\n        )}\n      </p>\n\n      <h2>Offers ({offers.length})</h2>\n      <section>\n        <ul className=\"flex flex-wrap gap-6 justify-center\">\n          {offers.map(offer => (\n            <li key={offer.id}>\n              <Offer offer={offer} />\n            </li>\n          ))}\n        </ul>\n      </section>\n\n      <h2>Communities ({communities.length})</h2>\n      <section>\n        <ul className=\"flex flex-wrap gap-6 justify-center\">\n          {communities.map(community => (\n            <li key={community.id}>\n              <Community\n                community={community}\n                isMember={\n                  loggedUser.communityIds.includes(community.id) &&\n                  community.memberIds.includes(loggedUser.id)\n                }\n                onJoin={() => dispatch(joinCommunity(community))}\n              />\n            </li>\n          ))}\n        </ul>\n      </section>\n    </div>\n  )\n}\n\nexport default User\n","import { LatLngTuple, Map } from 'leaflet'\nimport React, { FormEventHandler, useEffect, useState } from 'react'\nimport { MapContainer, Marker, TileLayer, useMapEvent } from 'react-leaflet'\nimport { Offer } from './types'\n\nconst EditOffer = ({\n  offer,\n  onSubmit,\n  onCancel,\n  submit,\n}: {\n  offer: Offer\n  onSubmit: (offer: Offer) => void\n  onCancel: () => void\n  submit: 'Create' | 'Update'\n}) => {\n  const [editedOffer, setEditedOffer] = useState(offer)\n\n  useEffect(() => {\n    setEditedOffer(offer)\n  }, [offer])\n\n  const handleChangeAbout: React.ChangeEventHandler<HTMLTextAreaElement> =\n    e => {\n      setEditedOffer(offer => ({\n        ...offer,\n        about: {\n          en: e.target.value,\n        },\n      }))\n    }\n\n  const handleChangePosition = (position: LatLngTuple) => {\n    setEditedOffer((offer: Offer) => ({\n      ...offer,\n      position,\n    }))\n  }\n\n  const handleSubmit: FormEventHandler<HTMLFormElement> = e => {\n    e.preventDefault()\n    onSubmit(editedOffer)\n  }\n\n  return (\n    <form\n      className=\"w-64 p-4 bg-blue-200 rounded flex flex-col gap-4\"\n      onSubmit={handleSubmit}\n    >\n      <LocationEdit\n        location={editedOffer.position}\n        onChange={handleChangePosition}\n        className=\"w-56 h-56\"\n      />\n      <textarea\n        className=\"h-40 p-1\"\n        value={editedOffer.about.en ?? ''}\n        onChange={handleChangeAbout}\n        placeholder=\"What can you and your place offer to guests?\"\n      />\n      <button className=\"bg-green-300 hover:bg-green-400\" type=\"submit\">\n        {submit}\n      </button>\n      <button className=\"hover:bg-gray-100\" type=\"button\" onClick={onCancel}>\n        Cancel\n      </button>\n    </form>\n  )\n}\n\nexport default EditOffer\n\nconst normalizeLng = (lng: number) => (((lng % 360) - 180 * 3) % 360) + 180\n\nconst LocationDrag = ({\n  onDrag,\n}: {\n  onDrag: (location: LatLngTuple) => void\n}) => {\n  const map = useMapEvent('drag', () => {\n    const { lat, lng } = map.getCenter()\n    onDrag([lat, normalizeLng(lng)])\n    map.setView([lat, normalizeLng(lng)])\n  })\n\n  return null\n}\n\nconst CurrentLocation = ({\n  onLocationFound,\n}: {\n  onLocationFound: (location: LatLngTuple) => void\n}) => {\n  const map = useMapEvent('locationfound', e => {\n    const { lat, lng } = e.latlng\n    onLocationFound([lat, lng])\n    map.flyTo([lat, normalizeLng(lng)])\n  })\n  return null\n}\n\nconst LocationEdit: React.FC<{\n  location: LatLngTuple\n  onChange: (location: LatLngTuple) => void\n  className?: string\n}> = ({ location, className = '', onChange }) => {\n  const [map, setMap] = useState<Map>()\n\n  return (\n    <div>\n      <section className=\"bg-yellow-200 p-2 text-sm italic\">\n        drag map to a new location or{' '}\n        <button\n          className=\"bg-yellow-50\"\n          type=\"button\"\n          onClick={() => map?.locate()}\n        >\n          find your location\n        </button>\n      </section>\n      <MapContainer\n        attributionControl={false}\n        center={location}\n        zoom={12}\n        scrollWheelZoom=\"center\"\n        doubleClickZoom=\"center\"\n        touchZoom=\"center\"\n        className={className}\n        whenCreated={setMap}\n      >\n        <CurrentLocation onLocationFound={onChange} />\n        <LocationDrag onDrag={onChange} />\n        <TileLayer url=\"https://{s}.tile-cyclosm.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png\" />\n        <Marker position={location} />\n      </MapContainer>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useAppDispatch, useAppSelector } from '../../app/hooks'\nimport { selectLoggedUser } from '../community/communitySlice'\nimport { selectLogin } from '../login/loginSlice'\nimport { selectUserOffers } from '../user/userSlice'\nimport EditOfferForm from './EditOffer'\nimport OfferItem from './Offer'\nimport { getHospexUri } from './offerAPI'\nimport { createOffer, updateOffer } from './offerSlice'\nimport { Offer } from './types'\n\nconst Offers = () => {\n  const user = useAppSelector(selectLoggedUser)\n  const { webId: userId } = useAppSelector(selectLogin)\n  const offers = useAppSelector(state => selectUserOffers(state, userId))\n  const dispatch = useAppDispatch()\n  const document = getHospexUri(userId)\n\n  const [create, setCreate] = useState(false)\n  const [edit, setEdit] = useState('')\n\n  const offerToEdit = offers.find(offer => offer.id === edit)\n\n  const handleClickAdd = () => {\n    setCreate(true)\n    setEdit('')\n  }\n\n  const handleClickEdit = (id: string) => {\n    setEdit('')\n    setCreate(false)\n    setEdit(id)\n  }\n\n  const handleCreate = (offer: Offer) => {\n    dispatch(createOffer({ offer, document }))\n    setCreate(false)\n  }\n\n  const handleUpdate = (offer: Offer) => {\n    dispatch(updateOffer({ offer, document }))\n    setEdit('')\n  }\n\n  const handleCancel = () => {\n    setCreate(false)\n    setEdit('')\n  }\n\n  return (\n    <div className=\"flex flex-col items-center justify-evenly my-8\">\n      <header>\n        <h1>\n          Offers of{' '}\n          <Link to={`/users/${encodeURIComponent(userId)}`}>\n            {user?.name ?? 'user'}\n          </Link>\n        </h1>\n      </header>\n      <ul className=\"flex flex-wrap gap-6 justify-center\">\n        {offers.map(offer => (\n          <li key={offer.id}>\n            {offer === offerToEdit ? (\n              <EditOfferForm\n                offer={offerToEdit}\n                onSubmit={handleUpdate}\n                onCancel={handleCancel}\n                submit=\"Update\"\n              />\n            ) : (\n              <OfferItem\n                offer={offer}\n                editable\n                onClickEdit={() => handleClickEdit(offer.id)}\n              />\n            )}\n          </li>\n        ))}\n        <li>\n          {create ? (\n            <EditOfferForm\n              offer={{\n                id: `${document}#offer${Date.now()}`,\n                userId,\n                position: [51.477, 0],\n                about: {\n                  en: '',\n                },\n              }}\n              onSubmit={handleCreate}\n              onCancel={handleCancel}\n              submit=\"Create\"\n            />\n          ) : !edit ? (\n            <button\n              className=\"w-64 h-64 p-4 bg-blue-400 rounded flex items-center justify-center text-5xl font-bold text-indigo-50\"\n              onClick={handleClickAdd}\n            >\n              + Add\n            </button>\n          ) : null}\n        </li>\n      </ul>\n    </div>\n  )\n}\n\nexport default Offers\n","import React from 'react'\nimport { useAppDispatch, useAppSelector } from '../../app/hooks'\nimport Community from './Community'\nimport { joinCommunity, selectLoggedUser } from './communitySlice'\nimport {\n  selectCommunities,\n  selectCommunitiesOfLoggedUser,\n} from './communitySlice'\n\nconst Communities = () => {\n  const communities = useAppSelector(selectCommunities)\n  const userCommunities = useAppSelector(selectCommunitiesOfLoggedUser)\n  const loggedUser = useAppSelector(selectLoggedUser)\n  const dispatch = useAppDispatch()\n  return (\n    <div className=\"flex flex-col items-center justify-evenly my-8\">\n      <header>\n        <h1>Communities</h1>\n      </header>\n      <ul className=\"flex flex-wrap gap-6 justify-center\">\n        {communities.map(community => (\n          <li key={community.id}>\n            <Community\n              key={community.id}\n              community={community}\n              isMember={\n                userCommunities.includes(community) &&\n                community.memberIds.includes(loggedUser.id)\n              }\n              onJoin={() => dispatch(joinCommunity(community))}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default Communities\n","import React from 'react'\n\nconst Loading = ({ message = 'Loading' }: { message?: string }) => (\n  <div className=\"flex items-center justify-center h-screen w-screen\">\n    {message}\n  </div>\n)\n\nexport default Loading\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\n\nexport interface OnboardingState {\n  onboarding: boolean\n  step: number\n}\n\nconst initialState: OnboardingState = {\n  onboarding: false,\n  step: 0,\n}\n\nexport const onboardingSlice = createSlice({\n  name: 'onboarding',\n  initialState,\n  reducers: {\n    setOnboarding: (state, action: PayloadAction<boolean>) => {\n      state.onboarding = action.payload\n    },\n    incrementStep: state => {\n      state.step++\n    },\n    decrementStep: state => {\n      state.step--\n    },\n    setStep: (state, action: PayloadAction<number>) => {\n      state.step = action.payload\n    },\n  },\n})\n\nexport const { setOnboarding, incrementStep, decrementStep, setStep } =\n  onboardingSlice.actions\n\nexport const selectOnboarding = (state: RootState) => state.onboarding\n\nexport default onboardingSlice.reducer\n","import React from 'react'\nimport { useAppDispatch, useAppSelector } from '../../app/hooks'\nimport { selectLogin } from '../login/loginSlice'\nimport { getHospexUri } from '../offer/offerAPI'\nimport { createHospexDocument } from '../user/userSlice'\nimport { setOnboarding } from './onboardingSlice'\n\nconst FirstTime = () => {\n  const dispatch = useAppDispatch()\n  const login = useAppSelector(selectLogin)\n\n  const hospexUri = getHospexUri(login.webId)\n\n  return (\n    <div className=\"h-screen flex flex-col items-center justify-center gap-4\">\n      <h1>It&apos;s your first time...</h1>\n      <button\n        className=\"bg-yellow-500\"\n        onClick={() => {\n          dispatch(setOnboarding(true))\n          dispatch(\n            createHospexDocument({\n              documentId: hospexUri,\n              userId: login.webId,\n            }),\n          )\n        }}\n      >\n        Let&apos;s get started!\n      </button>\n    </div>\n  )\n}\n\nexport default FirstTime\n","import React, { useEffect, useMemo } from 'react'\nimport { useHistory } from 'react-router'\nimport { useAppDispatch, useAppSelector } from '../../app/hooks'\nimport { selectLogin } from '../login/loginSlice'\nimport {\n  decrementStep,\n  incrementStep,\n  selectOnboarding,\n  setOnboarding,\n} from './onboardingSlice'\n\nconst Onboarding = () => {\n  const onboarding = useAppSelector(selectOnboarding)\n  const dispatch = useAppDispatch()\n  const login = useAppSelector(selectLogin)\n  const history = useHistory()\n\n  const steps = useMemo(\n    () => [\n      {\n        url: '/communities',\n        text: 'Join some communities so you can meet people',\n      },\n      {\n        url: `/users/${encodeURIComponent(login.webId)}`,\n        text: 'Edit your profile',\n      },\n      {\n        url: '/offers',\n        text: 'If you can, offer hosting to others',\n      },\n      {\n        url: '/',\n        text: 'Map is where you can find Hosts',\n      },\n    ],\n    [login.webId],\n  )\n\n  useEffect(() => {\n    history.replace(steps[onboarding.step].url)\n  }, [history, onboarding.step, steps])\n\n  if (!onboarding.onboarding) return null\n\n  return (\n    <>\n      <div className=\"h-32 w-screen z-2000 fixed flex flex-col items-center justify-evenly bg-purple-400\">\n        <div className=\"flex gap-1\">\n          {[0, 1, 2, 3].map(i => (\n            <div\n              key={i}\n              className={`${\n                i <= onboarding.step ? 'bg-purple-300' : 'bg-purple-50'\n              } h-2 w-2 rounded-full`}\n            />\n          ))}\n        </div>\n        <div>{steps[onboarding.step].text}</div>\n        <div className=\"flex justify-evenly w-full\">\n          {onboarding.step > 0 && (\n            <button\n              className=\"bg-purple-300 hover:bg-purple-50\"\n              onClick={() => dispatch(decrementStep())}\n            >\n              Back\n            </button>\n          )}\n          {onboarding.step < steps.length - 1 && (\n            <button\n              className=\"bg-purple-300 hover:bg-purple-50\"\n              onClick={() => dispatch(incrementStep())}\n            >\n              Next\n            </button>\n          )}\n          {onboarding.step === steps.length - 1 && (\n            <button\n              className=\"bg-purple-300 hover:bg-purple-50\"\n              onClick={() => dispatch(setOnboarding(false))}\n            >\n              Finish\n            </button>\n          )}\n        </div>\n      </div>\n      <div className=\"h-32\" />\n    </>\n  )\n}\n\nexport default Onboarding\n","import React, { useEffect } from 'react'\nimport { useAppDispatch, useAppSelector } from './app/hooks'\nimport Login from './features/login/Login'\nimport { init, selectLogin } from './features/login/loginSlice'\nimport OfferMap from './features/offer/OfferMap'\nimport Control from './features/Control'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport User from './features/user/User'\nimport Offers from './features/offer/Offers'\nimport Communities from './features/community/Communities'\nimport {\n  getCommunity,\n  selectLoggedUser,\n} from './features/community/communitySlice'\nimport Loading from './components/Loading'\nimport FirstTime from './features/onboarding/FirstTime'\nimport Onboarding from './features/onboarding/Onboarding'\n\nfunction App() {\n  const login = useAppSelector(selectLogin)\n  const dispatch = useAppDispatch()\n  const loggedUser = useAppSelector(selectLoggedUser)\n  useEffect(() => {\n    dispatch(init())\n  }, [dispatch])\n\n  // fetch featured communities\n  useEffect(() => {\n    if (login.isLoggedIn) {\n      ;['https://mrkvon.inrupt.net/hospex/sleepy-bike/community#us'].forEach(\n        id => {\n          dispatch(getCommunity(id))\n        },\n      )\n    }\n  }, [login.isLoggedIn, dispatch])\n\n  if (login.status === 'pending') return <Loading message=\"Initializing...\" />\n\n  if (!login.isLoggedIn) return <Login />\n\n  if (!loggedUser) return <Loading message=\"Fetching your profile...\" />\n\n  if (loggedUser.hospexDocuments.length === 0) return <FirstTime />\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Onboarding />\n        <Control />\n        <Switch>\n          <Route path=\"/users/:webId\">\n            <User />\n          </Route>\n          <Route path=\"/offers\">\n            <Offers />\n          </Route>\n          <Route path=\"/communities\">\n            <Communities />\n          </Route>\n          <Route path=\"/\">\n            <OfferMap />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","import { createSlice, isRejected, PayloadAction } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\n\ninterface NotificationState {\n  type: 'success' | 'error' | 'info' | ''\n  title: string\n  detail: string\n}\n\nconst initialState: NotificationState = {\n  type: '',\n  title: '',\n  detail: '',\n}\n\nconst notificationSlice = createSlice({\n  name: 'notification',\n  initialState,\n  reducers: {\n    setNotification: (state, action: PayloadAction<NotificationState>) =>\n      action.payload,\n    clearNotification: () => initialState,\n  },\n  extraReducers: builder =>\n    builder.addMatcher(isRejected, (_, action) => {\n      return {\n        type: 'error',\n        title: (action.error.code ?? '' + ' ' + action.error.name ?? '').trim(),\n        detail: action.error.message ?? '',\n      }\n    }),\n})\n\nexport const { setNotification, clearNotification } = notificationSlice.actions\n\nexport const selectNotification = (state: RootState) => state.notification\n\nexport default notificationSlice.reducer\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport offerReducer from '../features/offer/offerSlice'\nimport loginReducer from '../features/login/loginSlice'\nimport userReducer from '../features/user/userSlice'\nimport communityReducer from '../features/community/communitySlice'\nimport onboardingReducer from '../features/onboarding/onboardingSlice'\nimport notificationReducer from '../features/notification/notificationSlice'\n\nexport const store = configureStore({\n  reducer: {\n    offer: offerReducer,\n    community: communityReducer,\n    user: userReducer,\n    login: loginReducer,\n    onboarding: onboardingReducer,\n    notification: notificationReducer,\n  },\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React, { useEffect, useMemo } from 'react'\nimport { useAppDispatch, useAppSelector } from '../../app/hooks'\nimport { clearNotification, selectNotification } from './notificationSlice'\nimport { FaTimes } from 'react-icons/fa'\n\nconst NotificationContainer = () => {\n  const notification = useAppSelector(selectNotification)\n  if (notification.type === '') return null\n  return <Notification notification={notification as NotificationType} />\n}\n\nexport default NotificationContainer\n\ntype NotificationType = {\n  type: 'success' | 'error' | 'info'\n  title: 'string'\n  detail: string\n}\n\nconst Notification = ({ notification }: { notification: NotificationType }) => {\n  const dispatch = useAppDispatch()\n\n  const escFunction = useMemo(\n    () => (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        console.log(e.key)\n        e.stopPropagation()\n        dispatch(clearNotification())\n      }\n    },\n    [dispatch],\n  )\n\n  useEffect(() => {\n    document.addEventListener('keydown', escFunction, false)\n\n    return () => {\n      document.removeEventListener('keydown', escFunction, false)\n    }\n  }, [escFunction])\n\n  const color =\n    notification.type === 'error'\n      ? 'bg-red-500'\n      : notification.type === 'success'\n      ? 'bg-green-500'\n      : 'bg-yellow-500'\n\n  return (\n    <div\n      tabIndex={0}\n      title=\"click to close\"\n      className={`${color} p-4 fixed z-5000 bottom-0 bg-opacity-80 hover:bg-opacity-90 rounded-none max-h-screen w-full overflow-auto`}\n    >\n      <button\n        className={`absolute top-3 right-3 p-1 rounded-full ${color}`}\n        onClick={() => dispatch(clearNotification())}\n      >\n        <FaTimes />\n      </button>\n      <header>{notification.title}</header>\n      <section>\n        <pre>{notification.detail}</pre>\n      </section>\n    </div>\n  )\n}\n","import React, { ReactNode } from 'react'\nimport { FaSadCry } from 'react-icons/fa'\nimport { connect, ConnectedProps } from 'react-redux'\nimport { setNotification } from './features/notification/notificationSlice'\n\ninterface Props extends PropsFromRedux {\n  children: ReactNode\n}\n\ninterface State {\n  hasError: boolean\n}\n\nclass AppErrorBoundary extends React.Component<Props, State> {\n  public state: State = {\n    hasError: false,\n  }\n\n  /*\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n  */\n\n  componentDidCatch(error: Error /*, errorInfo: ErrorInfo*/) {\n    // You can also log the error to an error reporting service\n    this.setState({ hasError: true })\n    this.props.setNotification({\n      type: 'error',\n      title: error.constructor.name,\n      detail: error.message,\n    })\n  }\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return (\n        <div className=\"w-screen h-screen flex flex-col items-center justify-evenly font-bold text-2xl text-center\">\n          <FaSadCry className=\"text-5xl text-indigo-700\" />\n          <p>\n            Sorry, something went terribly wrong.\n            <br />\n            Please, let us know.\n            <br />\n            And reload...\n          </p>\n        </div>\n      )\n    }\n    return this.props.children\n  }\n}\n\nconst connector = connect(null, { setNotification })\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nexport default connector(AppErrorBoundary)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\nimport Modal from 'react-modal'\nimport Notification from './features/notification/Notification'\nimport AppErrorBoundary from './AppErrorBoundary'\n\n// this is required by react-modal library for proper modal accessibility\nModal.setAppElement('#root')\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppErrorBoundary>\n        <App />\n      </AppErrorBoundary>\n      <Notification />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}