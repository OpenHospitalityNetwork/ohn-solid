{"version":3,"sources":["app/hooks.ts","features/offer/offerAPI.ts","features/offer/offerSlice.ts","features/user/userAPI.ts","features/community/communityAPI.ts","features/community/communitySlice.ts","features/user/userSlice.ts","features/login/loginAPI.ts","features/login/loginSlice.ts","features/login/Login.tsx","features/offer/Map.tsx","features/offer/Offers.tsx","features/Control.tsx","features/user/User.tsx","features/offer/EditOffers.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","wgs84","a","getHospexUri","webId","exec","getOffersOfUser","hospexUri","getSolidDataset","fetch","dataset","things","getThingAll","offers","map","thing","url","getUrl","rdf","type","filter","id","asUrl","locationUri","location","getThing","lat","getDecimal","long","about","getStringByLocaleAll","rdfs","comment","userId","position","Object","fromEntries","offer","createHospexDocument","uri","saveSolidDatasetAt","createSolidDataset","Error","createOffer","document","Date","now","locationBuilder","buildThing","setUrl","setDecimal","offerBuilder","setStringWithLocale","en","newOfferThing","build","newLocationThing","newDataset","setThing","updateOffer","offerThing","locationThing","offerThingBuilder","setStringEnglish","locationThingBuilder","createAsyncThunk","api","offerSlice","createSlice","name","initialState","byId","allIds","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","forEach","includes","push","selectOffers","createSelector","getUser","user","getStringNoLocale","vcard","fn","foaf","avatarUrl","hasPhoto","displayProtectedImage","avatar","note","getStringWithLocale","communityIds","response","blob","objectUrl","URL","createObjectURL","getCommunitiesOfUser","communities","getUrlAll","getCommunity","community","memberIds","hasMember","getStringEnglish","label","communityId","getState","dispatch","userIds","communitySlice","userSlice","selectUserId","_","selectUser","users","selectUserOffers","values","login","oidcIssuer","solidLogin","redirectUrl","globalThis","href","clientName","init","handleIncomingRedirect","restorePreviousSession","logout","solidLogout","isLoggedIn","status","joinStatus","data","loginSlice","pending","rejected","selectLogin","Login","useState","provider","setProvider","onSubmit","e","preventDefault","htmlFor","value","onChange","target","Map","points","MapContainer","center","zoom","style","width","height","TileLayer","attribution","Marker","Popup","entries","lang","texts","join","Offers","Control","top","right","zIndex","to","encodeURIComponent","onClick","User","params","useParams","decodeURIComponent","src","alt","JSON","stringify","EditOfferForm","onCancel","submit","editedOffer","setEditedOffer","useEffect","placeholder","EditOffers","create","setCreate","edit","setEdit","offerToEdit","find","handleCancel","App","className","path","store","configureStore","reducer","offerReducer","communityReducer","userReducer","loginReducer","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.58354347.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import { Offer } from './types'\nimport { fetch } from '@inrupt/solid-client-authn-browser'\nimport {\n  asUrl,\n  buildThing,\n  createSolidDataset,\n  getDecimal,\n  getSolidDataset,\n  getStringByLocaleAll,\n  getThing,\n  getThingAll,\n  getUrl,\n  saveSolidDatasetAt,\n  setThing,\n  ThingPersisted,\n} from '@inrupt/solid-client'\nimport { rdf, rdfs } from 'rdf-namespaces'\nimport { LatLngTuple } from 'leaflet'\n\nconst wgs84 = (a: string) => 'http://www.w3.org/2003/01/geo/wgs84_pos#' + a\n\nexport const getHospexUri = (webId: string) => {\n  const baseUrl = /^(https:\\/\\/.*)\\/profile\\/card#me$/g.exec(webId)?.[1]\n  return baseUrl + '/public/hospex.ttl'\n}\n\nexport const getOffersOfUser = async (webId: string): Promise<Offer[]> => {\n  // @TODO replace with type indexes\n  const hospexUri = getHospexUri(webId)\n  const dataset = await getSolidDataset(hospexUri, { fetch })\n\n  const things = getThingAll(dataset)\n  const offers = things\n    .map(thing => ({ thing, url: getUrl(thing, rdf.type) }))\n    .filter(\n      ({ thing, url }) =>\n        thing && url === 'https://hospex.example.com/terms/0.1#Accommodation',\n    )\n    .map(({ thing }) => thing)\n    .map(thing => {\n      const id = asUrl(thing)\n\n      const locationUri = getUrl(thing, wgs84('location'))\n\n      if (!locationUri) return null\n\n      const location = getThing(dataset, locationUri)\n\n      const lat = location && getDecimal(location, wgs84('lat'))\n      const long = location && getDecimal(location, wgs84('long'))\n\n      if (lat === null || long === null) return null\n\n      const about = getStringByLocaleAll(thing, rdfs.comment)\n\n      return {\n        id,\n        userId: webId,\n        position: [lat, long] as LatLngTuple,\n        about: Object.fromEntries(about),\n      }\n    })\n    .filter((offer): offer is Offer => offer !== null)\n\n  return offers\n}\n\nexport const createHospexDocument = async (uri: string) => {\n  try {\n    await getSolidDataset(uri, { fetch })\n  } catch (error) {\n    // save the solid dataset to the new place\n\n    await saveSolidDatasetAt(uri, createSolidDataset(), {\n      fetch,\n    })\n  }\n  throw new Error('document already exists')\n}\n\nexport const createOffer = async (offer: Offer, document: string) => {\n  const dataset = await getSolidDataset(document, { fetch })\n\n  const locationUri = `${document}#location${Date.now()}`\n\n  const locationBuilder = buildThing({ url: locationUri })\n    .setUrl(rdf.type, wgs84('Point'))\n    .setDecimal(wgs84('lat'), offer.position[0])\n    .setDecimal(wgs84('long'), offer.position[1])\n\n  const offerBuilder = buildThing({ url: offer.id })\n    .setUrl(rdf.type, 'https://hospex.example.com/terms/0.1#Accommodation')\n    .setUrl('https://hospex.example.com/terms/0.1#offeredBy', offer.userId)\n    .setUrl(wgs84('location'), locationUri)\n    .setStringWithLocale(rdfs.comment, offer.about.en[0], 'en')\n\n  const newOfferThing = offerBuilder.build()\n  const newLocationThing = locationBuilder.build()\n\n  let newDataset = setThing(dataset, newOfferThing)\n  newDataset = setThing(newDataset, newLocationThing)\n  await saveSolidDatasetAt(document, newDataset, { fetch })\n\n  return offer\n}\n\nexport const updateOffer = async (offer: Offer, document: string) => {\n  const dataset = await getSolidDataset(document, { fetch })\n  const offerThing = getThing(dataset, offer.id) as ThingPersisted\n\n  if (offerThing) {\n    const locationUri = getUrl(offerThing, wgs84('location')) ?? ''\n\n    const locationThing = getThing(dataset, locationUri)\n\n    if (locationThing) {\n      const offerThingBuilder = buildThing(offerThing).setStringEnglish(\n        rdfs.comment,\n        offer.about.en[0],\n      )\n      const locationThingBuilder = buildThing(locationThing)\n        .setDecimal(wgs84('lat'), offer.position[0])\n        .setDecimal(wgs84('long'), offer.position[1])\n      let newDataset = setThing(dataset, offerThingBuilder.build())\n      newDataset = setThing(newDataset, locationThingBuilder.build())\n      await saveSolidDatasetAt(document, newDataset, { fetch })\n      return offer\n    }\n    throw new Error('location to update not found')\n  }\n  throw new Error('offer to update not found')\n}\n","import { createAsyncThunk, createSelector, createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\nimport * as api from './offerAPI'\nimport { Offer } from './types'\n\nexport interface OfferState {\n  byId: { [id: string]: Offer }\n  allIds: string[]\n}\n\nconst initialState: OfferState = {\n  byId: {},\n  allIds: [],\n}\n\nexport const getOffersOfUser = createAsyncThunk(\n  'offer/getOffersOfUser',\n  async (webId: string) => {\n    try {\n      return await api.getOffersOfUser(webId)\n    } catch (error) {\n      // if we fail, we create hospex document\n      await api.createHospexDocument(api.getHospexUri(webId))\n      throw error\n    }\n  },\n)\n\nexport const createOffer = createAsyncThunk(\n  'offer/create',\n  async ({ offer, document }: { offer: Offer; document: string }) => {\n    return await api.createOffer(offer, document)\n  },\n)\n\nexport const updateOffer = createAsyncThunk(\n  'offer/update',\n  async ({ offer, document }: { offer: Offer; document: string }) => {\n    return await api.updateOffer(offer, document)\n  },\n)\n\nexport const offerSlice = createSlice({\n  name: 'offer',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(getOffersOfUser.fulfilled, (state, action) => {\n        action.payload.forEach(offer => {\n          state.byId[offer.id] = offer\n          if (!state.allIds.includes(offer.id)) {\n            state.allIds.push(offer.id)\n          }\n        })\n      })\n      .addCase(createOffer.fulfilled, (state, action) => {\n        const offer = action.payload\n        state.byId[offer.id] = offer\n        state.allIds.push(offer.id)\n      })\n      .addCase(updateOffer.fulfilled, (state, action) => {\n        const offer = action.payload\n        state.byId[offer.id] = offer\n      })\n  },\n})\n\n// Selectors\nconst selectRawOffers = (state: RootState) => state.offer\nexport const selectOffers = createSelector(\n  selectRawOffers,\n  ({ byId, allIds }) => allIds.map(id => byId[id]),\n)\n\nexport default offerSlice.reducer\n","import { User } from './types'\nimport {\n  getSolidDataset,\n  getThing,\n  getStringNoLocale,\n  getUrl,\n  getStringWithLocale,\n} from '@inrupt/solid-client'\nimport { fetch } from '@inrupt/solid-client-authn-browser'\nimport { vcard, foaf } from 'rdf-namespaces'\n\nexport const getUser = async (webId: string): Promise<User | null> => {\n  const dataset = await getSolidDataset(webId, { fetch })\n\n  const user = getThing(dataset, webId)\n  if (!user) return null\n  const name =\n    (getStringNoLocale(user, vcard.fn) || getStringNoLocale(user, foaf.name)) ??\n    ''\n  const avatarUrl = getUrl(user, vcard.hasPhoto) ?? ''\n  const avatar = avatarUrl ? await displayProtectedImage(avatarUrl) : ''\n  const about =\n    (getStringNoLocale(user, vcard.note) ||\n      getStringWithLocale(user, vcard.note, 'en')) ??\n    ''\n  return {\n    id: webId,\n    name,\n    avatar,\n    about,\n    communityIds: [],\n  }\n}\n\n/**\n * https://alphahydrae.com/2021/02/how-to-display-an-image-protected-by-header-based-authentication/\n */\nconst displayProtectedImage = async (url: string): Promise<string> => {\n  // Fetch the image.\n  const response = await fetch(url)\n\n  // Create an object URL from the data.\n  const blob = await response.blob()\n  const objectUrl = URL.createObjectURL(blob)\n  return objectUrl\n}\n","import {\n  getSolidDataset,\n  getStringEnglish,\n  getThing,\n  getUrlAll,\n} from '@inrupt/solid-client'\nimport { fetch } from '@inrupt/solid-client-authn-browser'\nimport { rdfs, vcard } from 'rdf-namespaces'\nimport { getHospexUri } from '../offer/offerAPI'\nimport { Community } from './types'\n\nexport const getCommunitiesOfUser = async (\n  webId: string,\n): Promise<string[]> => {\n  // @TODO replace with type indexes\n  const hospexUri = getHospexUri(webId)\n  const dataset = await getSolidDataset(hospexUri, { fetch })\n\n  const user = getThing(dataset, webId)\n  if (!user) return []\n\n  const communities = getUrlAll(\n    user,\n    'https://hospex.example.com/terms/0.1#memberOf',\n  )\n\n  return communities\n}\n\nexport const getCommunity = async (id: string): Promise<Community | null> => {\n  const dataset = await getSolidDataset(id, { fetch })\n\n  const community = getThing(dataset, id)\n  if (!community) return null\n\n  const memberIds = getUrlAll(community, vcard.hasMember)\n\n  const name = getStringEnglish(community, rdfs.label) ?? 'Unknown Name'\n\n  return {\n    id,\n    name,\n    memberIds,\n  }\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\nimport { Community } from './types'\nimport * as api from './communityAPI'\nimport { getUser } from '../user/userSlice'\n\nexport interface CommunityState {\n  byId: { [id: string]: Community }\n  allIds: string[]\n}\n\nconst initialState: CommunityState = {\n  byId: {},\n  allIds: [],\n}\n\nexport const getCommunity = createAsyncThunk(\n  'community/getCommunity',\n  async (communityId: string, { getState, dispatch }) => {\n    const community = await api.getCommunity(communityId)\n\n    const state = getState() as RootState\n    const userIds = state.user.allIds\n\n    if (community) {\n      community.memberIds.forEach(id => {\n        if (!userIds.includes(id)) {\n          dispatch(getUser(id))\n        }\n      })\n    }\n\n    return community\n  },\n)\n\nexport const getCommunitiesOfUser = createAsyncThunk(\n  'community/getCommunitiesOfUser',\n  async (webId: string, { getState, dispatch }) => {\n    // fetch community ids of user\n    const communities = await api.getCommunitiesOfUser(webId)\n\n    // fetch communities that haven't been fetched before\n    const state = getState() as RootState\n    communities.forEach(community => {\n      if (!state.community.allIds.includes(community)) {\n        dispatch(getCommunity(community))\n      }\n    })\n    return {\n      userId: webId,\n      communities,\n    }\n  },\n)\n\nexport const communitySlice = createSlice({\n  name: 'community',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getCommunity.fulfilled, (state, action) => {\n      const community = action.payload\n      if (community) {\n        state.byId[community.id] = community\n        if (!state.allIds.includes(community.id)) {\n          state.allIds.push(community.id)\n        }\n      }\n    })\n  },\n})\n\nexport default communitySlice.reducer\n","import { createAsyncThunk, createSelector, createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\nimport * as api from './userAPI'\nimport { User } from './types'\nimport { getOffersOfUser } from '../offer/offerSlice'\nimport { getCommunitiesOfUser } from '../community/communitySlice'\n\nexport interface UserState {\n  byId: { [id: string]: User }\n  allIds: string[]\n}\n\nconst initialState: UserState = {\n  byId: {},\n  allIds: [],\n}\n\nexport const getUser = createAsyncThunk(\n  'user/fetchUser',\n  async (webId: string, { dispatch }) => {\n    const response = await api.getUser(webId)\n    dispatch(getOffersOfUser(webId))\n    dispatch(getCommunitiesOfUser(webId))\n    return response\n  },\n)\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(getUser.fulfilled, (state, action) => {\n        const user = action.payload\n        if (user) {\n          state.byId[user.id] = user\n          if (!state.allIds.includes(user.id)) {\n            state.allIds.push(user.id)\n          }\n        }\n      })\n      .addCase(getCommunitiesOfUser.fulfilled, (state, action) => {\n        const { userId, communities } = action.payload\n\n        state.byId[userId].communityIds = communities\n      })\n  },\n})\n\nexport default userSlice.reducer\n\nconst selectUserId = (_: RootState, webId: string) => webId\n\nconst selectUsers = (state: RootState) => state.user.byId\n\nexport const selectUser = createSelector(\n  selectUserId,\n  selectUsers,\n  (webId, users) =>\n    users[webId] ?? { id: webId, name: '', avatar: '', about: '' },\n)\n\nconst selectOffers = (state: RootState) => state.offer.byId\n\nexport const selectUserOffers = createSelector(\n  selectUserId,\n  selectOffers,\n  (userId, offers) =>\n    Object.values(offers).filter(offer => offer.userId === userId),\n)\n","import {\n  handleIncomingRedirect,\n  login as solidLogin,\n  logout as solidLogout,\n} from '@inrupt/solid-client-authn-browser'\n\nexport const login = async (oidcIssuer: string) => {\n  return await solidLogin({\n    oidcIssuer,\n    redirectUrl: globalThis.location.href,\n    clientName: 'Open Hospitality Network',\n  })\n}\n\nexport const init = async () =>\n  await handleIncomingRedirect({\n    url: globalThis.location.href,\n    restorePreviousSession: true,\n  })\n\nexport const logout = async () => await solidLogout()\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\nimport { getOffersOfUser } from '../offer/offerSlice'\nimport { getUser } from '../user/userSlice'\nimport * as api from './loginAPI'\n\nexport interface LoginState {\n  webId: string\n  isLoggedIn: boolean\n  status: 'success' | 'pending' | 'failed'\n  joinStatus: 'new' | 'pending' | 'old'\n}\n\nconst initialState: LoginState = {\n  webId: '',\n  isLoggedIn: false,\n  status: 'pending',\n  joinStatus: 'pending',\n}\n\nexport const login = createAsyncThunk('login/login', api.login)\n\nexport const init = createAsyncThunk('login/init', async (_, { dispatch }) => {\n  const data = await api.init()\n  if (data?.isLoggedIn && data?.webId) {\n    dispatch(getUser(data.webId))\n  }\n  return data\n})\n\nexport const logout = createAsyncThunk('login/logout', api.logout)\n\nexport const loginSlice = createSlice({\n  name: 'login',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(login.pending, state => {\n        state.status = 'pending'\n      })\n      .addCase(login.fulfilled, state => {\n        state.status = 'success'\n      })\n      .addCase(init.fulfilled, (state, action) => {\n        state.status = 'success'\n        state.webId = action.payload?.webId ?? ''\n        state.isLoggedIn = action.payload?.isLoggedIn ?? false\n      })\n      .addCase(logout.fulfilled, state => {\n        state.isLoggedIn = initialState.isLoggedIn\n        state.status = 'success'\n        state.webId = initialState.webId\n      })\n      // here we set up flow for new users\n      .addCase(getOffersOfUser.rejected, state => {\n        state.joinStatus = 'new'\n      })\n      .addCase(getOffersOfUser.fulfilled, state => {\n        state.joinStatus = 'old'\n      })\n  },\n})\n\nexport const selectLogin = (state: RootState) => state.login\n\nexport default loginSlice.reducer\n","import React, { FormEvent, useState } from 'react'\nimport { useAppDispatch } from '../../app/hooks'\nimport { login } from './loginSlice'\n\nconst Login = () => {\n  const [provider, setProvider] = useState('https://solidcommunity.net')\n  const dispatch = useAppDispatch()\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    dispatch(login(provider))\n  }\n  return (\n    <div>\n      <h1>Sign in with your Solid Identity</h1>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"provider\">Select your Solid Pod Provider</label>\n        <input\n          id=\"provider\"\n          type=\"text\"\n          value={provider}\n          onChange={e => setProvider(e.target.value)}\n        />\n        <input type=\"submit\" value=\"Sign In\" />\n      </form>\n    </div>\n  )\n}\n\nexport default Login\n","import React, { FC } from 'react'\nimport { MapContainer, Marker, Popup, TileLayer } from 'react-leaflet'\nimport { LatLngTuple } from 'leaflet'\nimport MarkerClusterGroup from 'react-leaflet-markercluster'\nimport { Offer } from './types'\nimport 'leaflet.markercluster/dist/MarkerCluster.css'\nimport 'leaflet.markercluster/dist/MarkerCluster.Default.css'\n\nconst Map: FC<{ points: Offer[] }> = ({ points }) => {\n  const position: LatLngTuple = [50, 15]\n\n  return (\n    <MapContainer\n      center={position}\n      zoom={10}\n      style={{ width: '100vw', height: '100vh' }}\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile-cyclosm.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png\"\n      />\n      <MarkerClusterGroup>\n        {points.map(offer => (\n          <Marker key={offer.id} position={offer.position}>\n            <Popup>\n              <p>{offer.id}</p>\n              <p>{offer.userId}</p>\n              <p>\n                {Object.entries(offer.about).map(([lang, texts]) => (\n                  <li key={lang}>\n                    <b>{lang}</b> <span>{texts.join('----')}</span>\n                  </li>\n                ))}\n              </p>\n            </Popup>\n          </Marker>\n        ))}\n      </MarkerClusterGroup>\n    </MapContainer>\n  )\n}\n\nexport default Map\n","import React from 'react'\nimport { useAppSelector } from '../../app/hooks'\nimport Map from './Map'\nimport { selectOffers } from './offerSlice'\n\nconst Offers = () => {\n  const offers = useAppSelector(selectOffers)\n  return <Map points={offers} />\n}\n\nexport default Offers\n","import React from 'react'\nimport { useAppDispatch, useAppSelector } from '../app/hooks'\nimport { logout, selectLogin } from './login/loginSlice'\nimport { Link } from 'react-router-dom'\n\nconst Control = () => {\n  const login = useAppSelector(selectLogin)\n  const dispatch = useAppDispatch()\n  return (\n    <nav style={{ position: 'fixed', top: '1rem', right: '1em', zIndex: 500 }}>\n      <Link to=\"/\">map</Link>\n      <br />\n      <Link to={`/user/${encodeURIComponent(login.webId)}`}>{login.webId}</Link>\n      <br />\n      <Link to=\"/offers/edit\">edit offers</Link>\n      <br />\n      <button onClick={() => dispatch(logout())}>Logout</button>\n    </nav>\n  )\n}\n\nexport default Control\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { useParams } from 'react-router'\nimport { RootState } from '../../app/store'\nimport { selectUser, selectUserOffers } from './userSlice'\n\nconst User = () => {\n  const params = useParams<{ webId: string }>()\n  const webId = decodeURIComponent(params.webId)\n  const user = useSelector((state: RootState) => selectUser(state, webId))\n  const offers = useSelector((state: RootState) =>\n    selectUserOffers(state, webId),\n  )\n  return (\n    <div>\n      <p>\n        <a href={user.id}>{user.name}</a>\n      </p>\n      <p>\n        <img src={user.avatar} alt={`Image of ${user.name}`} />\n      </p>\n      <p>{user.about}</p>\n      <ul>\n        {offers.map(offer => (\n          <li key={offer.id}>{JSON.stringify(offer)}</li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default User\n","import React, { useState, useEffect, FormEventHandler } from 'react'\nimport { useAppDispatch, useAppSelector } from '../../app/hooks'\nimport { selectLogin } from '../login/loginSlice'\nimport { selectUserOffers } from '../user/userSlice'\nimport { getHospexUri } from './offerAPI'\nimport { createOffer, updateOffer } from './offerSlice'\nimport { Offer } from './types'\n\nconst EditOffers = () => {\n  const { webId: userId } = useAppSelector(selectLogin)\n  const offers = useAppSelector(state => selectUserOffers(state, userId))\n  const dispatch = useAppDispatch()\n  const document = getHospexUri(userId)\n\n  const [create, setCreate] = useState(false)\n  const [edit, setEdit] = useState('')\n\n  const offerToEdit = offers.find(offer => offer.id === edit)\n\n  const handleClickAdd = () => {\n    setCreate(true)\n    setEdit('')\n  }\n\n  const handleClickEdit = (id: string) => {\n    setEdit('')\n    setCreate(false)\n    setEdit(id)\n  }\n\n  const handleCreate = (offer: Offer) => {\n    dispatch(createOffer({ offer, document }))\n    setCreate(false)\n  }\n\n  const handleUpdate = (offer: Offer) => {\n    dispatch(updateOffer({ offer, document }))\n    setEdit('')\n  }\n\n  const handleCancel = () => {\n    setCreate(false)\n    setEdit('')\n  }\n\n  if (create)\n    return (\n      <EditOfferForm\n        offer={{\n          id: `${document}#offer${Date.now()}`,\n          userId,\n          position: [0, 0],\n          about: {\n            en: [''],\n          },\n        }}\n        onSubmit={handleCreate}\n        onCancel={handleCancel}\n        submit=\"Create\"\n      />\n    )\n\n  if (offerToEdit)\n    return (\n      <EditOfferForm\n        offer={offerToEdit}\n        onSubmit={handleUpdate}\n        onCancel={handleCancel}\n        submit=\"Update\"\n      />\n    )\n\n  return (\n    <div>\n      <h1>Edit offers</h1>\n      <button onClick={handleClickAdd}>Add Offer</button>\n      <ul>\n        {offers.map(offer => (\n          <li key={offer.id}>\n            {JSON.stringify(offer)}{' '}\n            <button onClick={() => handleClickEdit(offer.id)}>edit</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nconst EditOfferForm = ({\n  offer,\n  onSubmit,\n  onCancel,\n  submit,\n}: {\n  offer: Offer\n  onSubmit: (offer: Offer) => void\n  onCancel: () => void\n  submit: 'Create' | 'Update'\n}) => {\n  const [editedOffer, setEditedOffer] = useState(offer)\n\n  useEffect(() => {\n    setEditedOffer(offer)\n  }, [offer])\n\n  const handleChangeAbout: React.ChangeEventHandler<HTMLInputElement> = e => {\n    setEditedOffer(offer => ({\n      ...offer,\n      about: {\n        en: [e.target.value],\n      },\n    }))\n  }\n  const handleChangeLat: React.ChangeEventHandler<HTMLInputElement> = e => {\n    setEditedOffer(offer => ({\n      ...offer,\n      position: [+e.target.value, offer.position[1]],\n    }))\n  }\n  const handleChangeLong: React.ChangeEventHandler<HTMLInputElement> = e => {\n    setEditedOffer(offer => ({\n      ...offer,\n      position: [offer.position[0], +e.target.value],\n    }))\n  }\n\n  const handleSubmit: FormEventHandler<HTMLFormElement> = e => {\n    e.preventDefault()\n    onSubmit(editedOffer)\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      {offer.id}\n      <br />\n      <input\n        value={editedOffer.about.en[0] ?? ''}\n        onChange={handleChangeAbout}\n        placeholder=\"about\"\n      />\n      <br />\n      <input\n        type=\"number\"\n        value={editedOffer.position[0]}\n        onChange={handleChangeLat}\n        placeholder=\"lat\"\n      />\n      <input\n        type=\"number\"\n        value={editedOffer.position[1]}\n        onChange={handleChangeLong}\n        placeholder=\"long\"\n      />\n      <br />\n      <input type=\"submit\" value={submit} />\n      <input type=\"button\" value=\"Cancel\" onClick={onCancel} />\n    </form>\n  )\n}\n\nexport default EditOffers\n","import React, { useEffect } from 'react'\nimport './App.css'\nimport { useAppDispatch, useAppSelector } from './app/hooks'\nimport Login from './features/login/Login'\nimport { init, selectLogin } from './features/login/loginSlice'\nimport Offers from './features/offer/Offers'\nimport Control from './features/Control'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport User from './features/user/User'\nimport EditOffers from './features/offer/EditOffers'\n\nfunction App() {\n  const login = useAppSelector(selectLogin)\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    dispatch(init())\n  }, [dispatch])\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {login.status === 'pending' ? (\n          <i>Loading</i>\n        ) : login.isLoggedIn ? (\n          <Router>\n            <Control />\n            <Switch>\n              <Route path=\"/user/:webId\">\n                <User />\n              </Route>\n              <Route path=\"/offers/edit\">\n                <EditOffers />\n              </Route>\n              <Route path=\"/\">\n                <Offers />\n              </Route>\n            </Switch>\n          </Router>\n        ) : (\n          <Login />\n        )}\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport offerReducer from '../features/offer/offerSlice'\nimport loginReducer from '../features/login/loginSlice'\nimport userReducer from '../features/user/userSlice'\nimport communityReducer from '../features/community/communitySlice'\n\nexport const store = configureStore({\n  reducer: {\n    offer: offerReducer,\n    community: communityReducer,\n    user: userReducer,\n    login: loginReducer,\n  },\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}