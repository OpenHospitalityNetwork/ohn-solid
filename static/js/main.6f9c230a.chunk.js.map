{"version":3,"sources":["app/hooks.ts","features/login/loginAPI.ts","features/login/loginSlice.ts","features/login/Login.tsx","features/offer/Map.tsx","features/offer/offerAPI.ts","features/offer/offerSlice.ts","features/offer/Offers.tsx","features/Control.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","login","oidcIssuer","a","solidLogin","redirectUrl","globalThis","location","href","clientName","init","handleIncomingRedirect","url","restorePreviousSession","logout","solidLogout","initialState","webId","isLoggedIn","status","createAsyncThunk","api","loginSlice","createSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","selectLogin","Login","useState","provider","setProvider","dispatch","onSubmit","e","preventDefault","htmlFor","id","type","value","onChange","target","Map","points","MapContainer","center","zoom","style","width","height","TileLayer","attribution","map","position","Marker","Popup","JSON","stringify","fetchOffers","offers","i","j","push","Math","random","loadOffers","response","offerSlice","byId","allIds","forEach","offer","selectOffers","createSelector","Offers","useEffect","Control","top","right","zIndex","onClick","App","className","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","counterSlice","increment","decrement","incrementByAmount","actions","store","configureStore","reducer","offerReducer","counter","counterReducer","loginReducer","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6f9c230a.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import {\n  handleIncomingRedirect,\n  login as solidLogin,\n  logout as solidLogout,\n} from '@inrupt/solid-client-authn-browser'\n\nexport const login = async (oidcIssuer: string) => {\n  return await solidLogin({\n    oidcIssuer,\n    redirectUrl: globalThis.location.href,\n    clientName: 'Open Hospitality Network',\n  })\n}\n\nexport const init = async () =>\n  await handleIncomingRedirect({\n    url: globalThis.location.href,\n    restorePreviousSession: true,\n  })\n\nexport const logout = async () => await solidLogout()\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\nimport * as api from './loginAPI'\n\nexport interface LoginState {\n  webId: string\n  isLoggedIn: boolean\n  status: 'success' | 'pending' | 'failed'\n}\n\nconst initialState: LoginState = {\n  webId: '',\n  isLoggedIn: false,\n  status: 'pending',\n}\n\nexport const login = createAsyncThunk('login/login', api.login)\n\nexport const init = createAsyncThunk('login/init', api.init)\n\nexport const logout = createAsyncThunk('login/logout', api.logout)\n\nexport const loginSlice = createSlice({\n  name: 'login',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(login.pending, state => {\n        state.status = 'pending'\n      })\n      .addCase(login.fulfilled, state => {\n        state.status = 'success'\n      })\n      .addCase(init.fulfilled, (state, action) => {\n        state.status = 'success'\n        state.webId = action.payload?.webId ?? ''\n        state.isLoggedIn = action.payload?.isLoggedIn ?? false\n      })\n      .addCase(logout.fulfilled, state => {\n        state.isLoggedIn = initialState.isLoggedIn\n        state.status = 'success'\n        state.webId = initialState.webId\n      })\n  },\n})\n\nexport const selectLogin = (state: RootState) => state.login\n\nexport default loginSlice.reducer\n","import React, { FormEvent, useState } from 'react'\nimport { useAppDispatch } from '../../app/hooks'\nimport { login } from './loginSlice'\n\nconst Login = () => {\n  const [provider, setProvider] = useState('https://solidcommunity.net')\n  const dispatch = useAppDispatch()\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    dispatch(login(provider))\n  }\n  return (\n    <div>\n      <h1>Sign in with your Solid Identity</h1>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"provider\">Select your Solid Pod Provider</label>\n        <input\n          id=\"provider\"\n          type=\"text\"\n          value={provider}\n          onChange={e => setProvider(e.target.value)}\n        />\n        <input type=\"submit\" value=\"Sign In\" />\n      </form>\n    </div>\n  )\n}\n\nexport default Login\n","import React, { FC } from 'react'\nimport { MapContainer, Marker, Popup, TileLayer } from 'react-leaflet'\nimport { LatLngTuple } from 'leaflet'\nimport MarkerClusterGroup from 'react-leaflet-markercluster'\nimport { Offer } from './types'\nimport 'leaflet.markercluster/dist/MarkerCluster.css'\nimport 'leaflet.markercluster/dist/MarkerCluster.Default.css'\n\nconst Map: FC<{ points: Offer[] }> = ({ points }) => {\n  const position: LatLngTuple = [54, 23]\n\n  return (\n    <MapContainer\n      center={position}\n      zoom={10}\n      style={{ width: '100vw', height: '100vh' }}\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile-cyclosm.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png\"\n      />\n      <MarkerClusterGroup>\n        {points.map(({ id, position }) => (\n          <Marker key={JSON.stringify(position)} position={position}>\n            <Popup>There will be a basic user {id} info here, or not.</Popup>\n          </Marker>\n        ))}\n      </MarkerClusterGroup>\n    </MapContainer>\n  )\n}\n\nexport default Map\n","import { Offer } from './types'\n\n// A mock function to mimic making an async request for data\nexport const fetchOffers = async (): Promise<Offer[]> => {\n  const offers: Offer[] = []\n  for (let i = 0; i < 40; i++) {\n    for (let j = 0; j < 40; j++) {\n      offers.push({\n        id: `${i}_${j}`,\n        position: [(Math.random() - 0.5) * 160, (Math.random() - 0.5) * 360],\n      })\n    }\n  }\n  return offers\n}\n","import { createAsyncThunk, createSelector, createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\nimport * as api from './offerAPI'\nimport { Offer } from './types'\n\nexport interface OfferState {\n  byId: { [id: string]: Offer }\n  allIds: string[]\n}\n\nconst initialState: OfferState = {\n  byId: {},\n  allIds: [],\n}\n\nexport const loadOffers = createAsyncThunk('offer/fetchOffers', async () => {\n  const response = await api.fetchOffers()\n  // The value we return becomes the `fulfilled` action payload\n  return response\n})\n\nexport const offerSlice = createSlice({\n  name: 'offer',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(loadOffers.fulfilled, (state, action) => {\n      action.payload.forEach(offer => {\n        state.byId[offer.id] = offer\n        state.allIds.push(offer.id)\n      })\n    })\n  },\n})\n\n// export const { increment, decrement, incrementByAmount } = offerSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nconst selectRawOffers = (state: RootState) => state.offer\nexport const selectOffers = createSelector(\n  selectRawOffers,\n  ({ byId, allIds }) => allIds.map(id => byId[id]),\n)\n\nexport default offerSlice.reducer\n","import React, { useEffect } from 'react'\nimport { useAppDispatch, useAppSelector } from '../../app/hooks'\nimport Map from './Map'\nimport { loadOffers, selectOffers } from './offerSlice'\n\nconst Offers = () => {\n  const offers = useAppSelector(selectOffers)\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    dispatch(loadOffers())\n  }, [dispatch])\n\n  return <Map points={offers} />\n}\n\nexport default Offers\n","import React from 'react'\nimport { useAppDispatch, useAppSelector } from '../app/hooks'\nimport { logout, selectLogin } from './login/loginSlice'\n\nconst Control = () => {\n  const login = useAppSelector(selectLogin)\n  const dispatch = useAppDispatch()\n  return (\n    <nav style={{ position: 'fixed', top: '1rem', right: '1em', zIndex: 500 }}>\n      <button>{login.webId}</button>\n      <br />\n      <button onClick={() => dispatch(logout())}>Logout</button>\n    </nav>\n  )\n}\n\nexport default Control\n","import React, { useEffect } from 'react'\nimport './App.css'\nimport { useAppDispatch, useAppSelector } from './app/hooks'\nimport Login from './features/login/Login'\nimport { init, selectLogin } from './features/login/loginSlice'\nimport Offers from './features/offer/Offers'\nimport Control from './features/Control'\n\nfunction App() {\n  const login = useAppSelector(selectLogin)\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    dispatch(init())\n  }, [dispatch])\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {login.status === 'pending' ? (\n          <i>Loading</i>\n        ) : login.isLoggedIn ? (\n          <>\n            <Control />\n            <Offers />\n          </>\n        ) : (\n          <Login />\n        )}\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>(resolve =>\n    setTimeout(() => resolve({ data: amount }), 500),\n  )\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { RootState, AppThunk } from '../../app/store'\nimport { fetchCount } from './counterAPI'\n\nexport interface CounterState {\n  value: number\n  status: 'idle' | 'loading' | 'failed'\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n}\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount)\n    // The value we return becomes the `fulfilled` action payload\n    return response.data\n  },\n)\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decrement: state => {\n      state.value -= 1\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder\n      .addCase(incrementAsync.pending, state => {\n        state.status = 'loading'\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle'\n        state.value += action.payload\n      })\n  },\n})\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd =\n  (amount: number): AppThunk =>\n  (dispatch, getState) => {\n    const currentValue = selectCount(getState())\n    if (currentValue % 2 === 1) {\n      dispatch(incrementByAmount(amount))\n    }\n  }\n\nexport default counterSlice.reducer\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport offerReducer from '../features/offer/offerSlice'\nimport counterReducer from '../features/counter/counterSlice'\nimport loginReducer from '../features/login/loginSlice'\n\nexport const store = configureStore({\n  reducer: {\n    offer: offerReducer,\n    counter: counterReducer,\n    login: loginReducer,\n  },\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}